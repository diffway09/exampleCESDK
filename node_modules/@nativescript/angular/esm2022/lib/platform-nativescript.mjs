import { Sanitizer, createPlatformFactory, platformCore, PLATFORM_ID } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NativeScriptPlatformRefProxy } from './platform-ref';
import { AppHostView } from './app-host-view';
import { Color, GridLayout } from '@nativescript/core';
import { defaultPageFactory, PAGE_FACTORY } from './tokens';
export const defaultPageFactoryProvider = { provide: PAGE_FACTORY, useValue: defaultPageFactory };
export class NativeScriptSanitizer extends Sanitizer {
    sanitize(_context, value) {
        return value;
    }
}
// TODO: when angular finally exports their scheduler token for ivy CD, provide our own with queueMacroTask
// export function schedulerFactory() {
//   return (fn: any) => {
//     console.log('SCHEDULER');
//     setTimeout(fn, 0);
//   };
// }
export class NativeScriptDocument {
    constructor() {
        // Required by the AnimationDriver
        this.body = {
            isOverride: true,
        };
    }
    createElement(tag) {
        throw new Error('NativeScriptDocument is not DOM Document. There is no createElement() method.');
    }
}
export const COMMON_PROVIDERS = [defaultPageFactoryProvider, { provide: Sanitizer, useClass: NativeScriptSanitizer, deps: [] }, { provide: DOCUMENT, useClass: NativeScriptDocument, deps: [] }, { provide: PLATFORM_ID, useValue: 'browser' }];
export const platformNativeScript = createPlatformFactory(platformCore, 'nativescriptDynamic', COMMON_PROVIDERS);
/**
 * @deprecated use runNativeScriptAngularApp instead
 */
export const platformNativeScriptDynamic = function (options, extraProviders) {
    console.log('platformNativeScriptDynamic is deprecated, use runNativeScriptAngularApp instead');
    options = options || {};
    extraProviders = extraProviders || [];
    const ngRootView = new AppHostView(new Color(options.backgroundColor || 'white'));
    let launchView = options.launchView;
    if (!launchView && options.async) {
        launchView = new GridLayout();
        launchView.backgroundColor = options.backgroundColor || 'white';
    }
    return new NativeScriptPlatformRefProxy(platformNativeScript([...extraProviders]), launchView);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm0tbmF0aXZlc2NyaXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci9zcmMvbGliL3BsYXRmb3JtLW5hdGl2ZXNjcmlwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQTRGLFNBQVMsRUFBa0MscUJBQXFCLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0TixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDdkQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFlBQVksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUc1RCxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFFLENBQUM7QUFDbEcsTUFBTSxPQUFPLHFCQUFzQixTQUFRLFNBQVM7SUFDbEQsUUFBUSxDQUFDLFFBQWEsRUFBRSxLQUFhO1FBQ25DLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztDQUNGO0FBQ0QsMkdBQTJHO0FBQzNHLHVDQUF1QztBQUN2QywwQkFBMEI7QUFDMUIsZ0NBQWdDO0FBQ2hDLHlCQUF5QjtBQUN6QixPQUFPO0FBQ1AsSUFBSTtBQUVKLE1BQU0sT0FBTyxvQkFBb0I7SUFBakM7UUFDRSxrQ0FBa0M7UUFDM0IsU0FBSSxHQUFRO1lBQ2pCLFVBQVUsRUFBRSxJQUFJO1NBQ2pCLENBQUM7SUFLSixDQUFDO0lBSEMsYUFBYSxDQUFDLEdBQVc7UUFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQywrRUFBK0UsQ0FBQyxDQUFDO0lBQ25HLENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsMEJBQTBCLEVBQUUsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBRWhQLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHFCQUFxQixDQUFDLFlBQVksRUFBRSxxQkFBcUIsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBb0NqSDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLFVBQVUsT0FBb0IsRUFBRSxjQUFpQztJQUMxRyxPQUFPLENBQUMsR0FBRyxDQUFDLGtGQUFrRixDQUFDLENBQUM7SUFDaEcsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFDeEIsY0FBYyxHQUFHLGNBQWMsSUFBSSxFQUFFLENBQUM7SUFFdEMsTUFBTSxVQUFVLEdBQUcsSUFBSSxXQUFXLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLGVBQWUsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2xGLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDcEMsSUFBSSxDQUFDLFVBQVUsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDakMsVUFBVSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7UUFDOUIsVUFBVSxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUMsZUFBZSxJQUFJLE9BQU8sQ0FBQztJQUNsRSxDQUFDO0lBQ0QsT0FBTyxJQUFJLDRCQUE0QixDQUFDLG9CQUFvQixDQUFDLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ2pHLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGUsIEluamVjdG9yLCBDb21waWxlck9wdGlvbnMsIFBsYXRmb3JtUmVmLCBOZ01vZHVsZUZhY3RvcnksIE5nTW9kdWxlUmVmLCBFdmVudEVtaXR0ZXIsIFNhbml0aXplciwgSW5qZWN0aW9uVG9rZW4sIFN0YXRpY1Byb3ZpZGVyLCBjcmVhdGVQbGF0Zm9ybUZhY3RvcnksIHBsYXRmb3JtQ29yZSwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5hdGl2ZVNjcmlwdFBsYXRmb3JtUmVmUHJveHkgfSBmcm9tICcuL3BsYXRmb3JtLXJlZic7XG5pbXBvcnQgeyBBcHBIb3N0VmlldyB9IGZyb20gJy4vYXBwLWhvc3Qtdmlldyc7XG5pbXBvcnQgeyBDb2xvciwgR3JpZExheW91dCB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZSc7XG5pbXBvcnQgeyBkZWZhdWx0UGFnZUZhY3RvcnksIFBBR0VfRkFDVE9SWSB9IGZyb20gJy4vdG9rZW5zJztcbmltcG9ydCB7IEFwcExhdW5jaFZpZXcgfSBmcm9tICcuL2FwcGxpY2F0aW9uJztcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRQYWdlRmFjdG9yeVByb3ZpZGVyID0geyBwcm92aWRlOiBQQUdFX0ZBQ1RPUlksIHVzZVZhbHVlOiBkZWZhdWx0UGFnZUZhY3RvcnkgfTtcbmV4cG9ydCBjbGFzcyBOYXRpdmVTY3JpcHRTYW5pdGl6ZXIgZXh0ZW5kcyBTYW5pdGl6ZXIge1xuICBzYW5pdGl6ZShfY29udGV4dDogYW55LCB2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbi8vIFRPRE86IHdoZW4gYW5ndWxhciBmaW5hbGx5IGV4cG9ydHMgdGhlaXIgc2NoZWR1bGVyIHRva2VuIGZvciBpdnkgQ0QsIHByb3ZpZGUgb3VyIG93biB3aXRoIHF1ZXVlTWFjcm9UYXNrXG4vLyBleHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVyRmFjdG9yeSgpIHtcbi8vICAgcmV0dXJuIChmbjogYW55KSA9PiB7XG4vLyAgICAgY29uc29sZS5sb2coJ1NDSEVEVUxFUicpO1xuLy8gICAgIHNldFRpbWVvdXQoZm4sIDApO1xuLy8gICB9O1xuLy8gfVxuXG5leHBvcnQgY2xhc3MgTmF0aXZlU2NyaXB0RG9jdW1lbnQge1xuICAvLyBSZXF1aXJlZCBieSB0aGUgQW5pbWF0aW9uRHJpdmVyXG4gIHB1YmxpYyBib2R5OiBhbnkgPSB7XG4gICAgaXNPdmVycmlkZTogdHJ1ZSxcbiAgfTtcblxuICBjcmVhdGVFbGVtZW50KHRhZzogc3RyaW5nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOYXRpdmVTY3JpcHREb2N1bWVudCBpcyBub3QgRE9NIERvY3VtZW50LiBUaGVyZSBpcyBubyBjcmVhdGVFbGVtZW50KCkgbWV0aG9kLicpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBDT01NT05fUFJPVklERVJTID0gW2RlZmF1bHRQYWdlRmFjdG9yeVByb3ZpZGVyLCB7IHByb3ZpZGU6IFNhbml0aXplciwgdXNlQ2xhc3M6IE5hdGl2ZVNjcmlwdFNhbml0aXplciwgZGVwczogW10gfSwgeyBwcm92aWRlOiBET0NVTUVOVCwgdXNlQ2xhc3M6IE5hdGl2ZVNjcmlwdERvY3VtZW50LCBkZXBzOiBbXSB9LCB7IHByb3ZpZGU6IFBMQVRGT1JNX0lELCB1c2VWYWx1ZTogJ2Jyb3dzZXInIH1dO1xuXG5leHBvcnQgY29uc3QgcGxhdGZvcm1OYXRpdmVTY3JpcHQgPSBjcmVhdGVQbGF0Zm9ybUZhY3RvcnkocGxhdGZvcm1Db3JlLCAnbmF0aXZlc2NyaXB0RHluYW1pYycsIENPTU1PTl9QUk9WSURFUlMpO1xuXG5leHBvcnQgaW50ZXJmYWNlIEhtck9wdGlvbnMge1xuICAvKipcbiAgICogQSBmYWN0b3J5IGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIgTW9kdWxlIHR5cGUgb3IgTmdNb2R1bGVGYWN0b3J5IHR5cGUuXG4gICAqIFRoaXMgbmVlZHMgdG8gYmUgYSBmYWN0b3J5IGZ1bmN0aW9uIGFzIHRoZSB0eXBlcyB3aWxsIGNoYW5nZSB3aGVuIG1vZHVsZXMgYXJlIHJlcGxhY2VkLlxuICAgKi9cbiAgbW9kdWxlVHlwZUZhY3Rvcnk/OiAoKSA9PiBUeXBlPGFueT4gfCBOZ01vZHVsZUZhY3Rvcnk8YW55PjtcblxuICAvKipcbiAgICogQSBsaXZlc3luYyBjYWxsYmFjayB0aGF0IHdpbGwgYmUgY2FsbGVkIGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGxpdmVzeW5jLlxuICAgKiBJdCBnaXZlcyB0aGUgSE1SIGEgaG9vayB0byBhcHBseSB0aGUgbW9kdWxlIHJlcGxhY2VtZW50LlxuICAgKiBAcGFyYW0gYm9vdHN0cmFwUGxhdGZvcm0gLSBBIGJvb3RzdHJhcCBjYWxsYmFjayB0byBiZSBjYWxsZWQgYWZ0ZXIgSE1SIGlzIGRvbmUuIEl0IHdpbGwgYm9vdHN0cmFwIGEgbmV3IGFuZ3VsYXIgYXBwIHdpdGhpbiB0aGUgZXhpc2l0aW5nIHBsYXRmb3JtLCB1c2luZyB0aGUgbW9kdWxlVHlwZUZhY3RvcnkgdG8gZ2V0IHRoZSBNb2R1bGUgb3IgTmdNb2R1bGVGYWN0b3J5IHRvIGJlIHVzZWQuXG4gICAqL1xuICBsaXZlc3luY0NhbGxiYWNrOiAoYm9vdHN0cmFwUGxhdGZvcm06ICgpID0+IHZvaWQpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwT3B0aW9ucyB7XG4gIGNzc0ZpbGU/OiBzdHJpbmc7XG4gIHN0YXJ0UGFnZUFjdGlvbkJhckhpZGRlbj86IGJvb2xlYW47XG4gIGhtck9wdGlvbnM/OiBIbXJPcHRpb25zO1xuICAvKipcbiAgICogQmFja2dyb3VuZCBjb2xvciBvZiB0aGUgcm9vdCB2aWV3XG4gICAqL1xuICBiYWNrZ3JvdW5kQ29sb3I/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBVc2UgYW5pbWF0ZWQgbGF1bmNoIHZpZXcgKGFzeW5jIGJ5IGRlZmF1bHQpXG4gICAqL1xuICBsYXVuY2hWaWV3PzogQXBwTGF1bmNoVmlldztcbiAgLyoqXG4gICAqIFdoZW4gdXNpbmcgQXN5bmMgQVBQX0lOSVRJQUxJWkVSLCBzZXQgdGhpcyB0byBgdHJ1ZWAuXG4gICAqIChOb3QgbmVlZGVkIHdoZW4gdXNpbmcgbGF1bmNoVmlldylcbiAgICovXG4gIGFzeW5jPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCB1c2UgcnVuTmF0aXZlU2NyaXB0QW5ndWxhckFwcCBpbnN0ZWFkXG4gKi9cbmV4cG9ydCBjb25zdCBwbGF0Zm9ybU5hdGl2ZVNjcmlwdER5bmFtaWMgPSBmdW5jdGlvbiAob3B0aW9ucz86IEFwcE9wdGlvbnMsIGV4dHJhUHJvdmlkZXJzPzogU3RhdGljUHJvdmlkZXJbXSkge1xuICBjb25zb2xlLmxvZygncGxhdGZvcm1OYXRpdmVTY3JpcHREeW5hbWljIGlzIGRlcHJlY2F0ZWQsIHVzZSBydW5OYXRpdmVTY3JpcHRBbmd1bGFyQXBwIGluc3RlYWQnKTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGV4dHJhUHJvdmlkZXJzID0gZXh0cmFQcm92aWRlcnMgfHwgW107XG5cbiAgY29uc3QgbmdSb290VmlldyA9IG5ldyBBcHBIb3N0VmlldyhuZXcgQ29sb3Iob3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IgfHwgJ3doaXRlJykpO1xuICBsZXQgbGF1bmNoVmlldyA9IG9wdGlvbnMubGF1bmNoVmlldztcbiAgaWYgKCFsYXVuY2hWaWV3ICYmIG9wdGlvbnMuYXN5bmMpIHtcbiAgICBsYXVuY2hWaWV3ID0gbmV3IEdyaWRMYXlvdXQoKTtcbiAgICBsYXVuY2hWaWV3LmJhY2tncm91bmRDb2xvciA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yIHx8ICd3aGl0ZSc7XG4gIH1cbiAgcmV0dXJuIG5ldyBOYXRpdmVTY3JpcHRQbGF0Zm9ybVJlZlByb3h5KHBsYXRmb3JtTmF0aXZlU2NyaXB0KFsuLi5leHRyYVByb3ZpZGVyc10pLCBsYXVuY2hWaWV3KTtcbn07XG4iXX0=