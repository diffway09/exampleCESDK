import { View } from '@nativescript/core';
import { createKeyframeAnimation } from './utils';
import { NativeScriptDebug } from '../trace';
export class NativeScriptAnimationPlayer {
    constructor(target, keyframes, duration, delay, easing) {
        this.target = target;
        this.duration = duration;
        this.delay = delay;
        this.parentPlayer = null;
        this._startSubscriptions = [];
        this._doneSubscriptions = [];
        this._finished = false;
        this._started = false;
        this.initKeyframeAnimation(keyframes, duration, delay, easing);
    }
    get totalTime() {
        return this.delay + this.duration;
    }
    init() { }
    hasStarted() {
        return this._started;
    }
    onStart(fn) {
        this._startSubscriptions.push(fn);
    }
    onDone(fn) {
        this._doneSubscriptions.push(fn);
    }
    onDestroy(fn) {
        this._doneSubscriptions.push(fn);
    }
    play() {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.animationsLog(`NativeScriptAnimationPlayer.play`);
        }
        if (!this.animation) {
            return;
        }
        if (!this._started) {
            this._started = true;
            this._startSubscriptions.forEach((fn) => fn());
            this._startSubscriptions = [];
        }
        // When this issue https://github.com/NativeScript/NativeScript/issues/7984 is fixes in @nativescript/core
        // we can change this fix and apply the one that is recommended in that issue.
        if (this.target.isLoaded) {
            this.playAnimation();
        }
        else {
            this.target.on(View.loadedEvent, this.onTargetLoaded.bind(this));
        }
    }
    onTargetLoaded(args) {
        this.target.off(View.loadedEvent, this.onTargetLoaded);
        this.playAnimation();
    }
    playAnimation() {
        this.animation
            .play(this.target)
            .then(() => this.onFinish())
            .catch((_e) => { });
    }
    pause() { }
    finish() {
        this.onFinish();
    }
    reset() {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.animationsLog(`NativeScriptAnimationPlayer.reset`);
        }
        if (this.animation && this.animation.isPlaying) {
            this.animation.cancel();
        }
    }
    restart() {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.animationsLog(`NativeScriptAnimationPlayer.restart`);
        }
        this.reset();
        this.play();
    }
    destroy() {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.animationsLog(`NativeScriptAnimationPlayer.destroy`);
        }
        this.onFinish();
    }
    setPosition(_p) {
        throw new Error('AnimationPlayer.setPosition method is not supported!');
    }
    getPosition() {
        return 0;
    }
    initKeyframeAnimation(keyframes, duration, delay, easing) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.animationsLog(`NativeScriptAnimationPlayer.initKeyframeAnimation`);
        }
        this.animation = createKeyframeAnimation(keyframes, duration, delay, easing);
    }
    onFinish() {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.animationsLog(`NativeScriptAnimationPlayer.onFinish`);
        }
        if (this._finished) {
            return;
        }
        this._finished = true;
        this._started = false;
        this._doneSubscriptions.forEach((fn) => fn());
        this._doneSubscriptions = [];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLXBsYXllci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FuZ3VsYXIvc3JjL2xpYi9hbmltYXRpb25zL2FuaW1hdGlvbi1wbGF5ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLElBQUksRUFBZ0MsTUFBTSxvQkFBb0IsQ0FBQztBQUV4RSxPQUFPLEVBQVksdUJBQXVCLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFNUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTdDLE1BQU0sT0FBTywyQkFBMkI7SUFTdEMsWUFBb0IsTUFBYyxFQUFFLFNBQXFCLEVBQVUsUUFBZ0IsRUFBVSxLQUFhLEVBQUUsTUFBYztRQUF0RyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQWlDLGFBQVEsR0FBUixRQUFRLENBQVE7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUFRO1FBUm5HLGlCQUFZLEdBQW9CLElBQUksQ0FBQztRQUVwQyx3QkFBbUIsR0FBZSxFQUFFLENBQUM7UUFDckMsdUJBQWtCLEdBQWUsRUFBRSxDQUFDO1FBQ3BDLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDbEIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUl2QixJQUFJLENBQUMscUJBQXFCLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVELElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxJQUFJLEtBQVUsQ0FBQztJQUVmLFVBQVU7UUFDUixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVELE9BQU8sQ0FBQyxFQUFZO1FBQ2xCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFD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QUFJLEtBQUssQ0FBQyxzREFBc0QsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxXQUFXO1FBQ1QsT0FBTyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRU8scUJBQXFCLENBQUMsU0FBcUIsRUFBRSxRQUFnQixFQUFFLEtBQWEsRUFBRSxNQUFjO1FBQ2xHLElBQUksaUJBQWlCLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQztZQUNyQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsbURBQW1ELENBQUMsQ0FBQztRQUN2RixDQUFDO1FBRUQsSUFBSSxDQUFDLFNBQVMsR0FBRyx1QkFBdUIsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRU8sUUFBUTtRQUNkLElBQUksaUJBQWlCLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQztZQUNyQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUMxRSxDQUFDO1FBRUQsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDbkIsT0FBTztRQUNULENBQUM7UUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUN0QixJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxFQUFFLENBQUM7SUFDL0IsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzICovXG5pbXBvcnQgeyBBbmltYXRpb25QbGF5ZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IFZpZXcsIEV2ZW50RGF0YSwgS2V5ZnJhbWVBbmltYXRpb24gfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuXG5pbXBvcnQgeyBLZXlmcmFtZSwgY3JlYXRlS2V5ZnJhbWVBbmltYXRpb24gfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IE5nVmlldyB9IGZyb20gJy4uL3ZpZXdzL3ZpZXctdHlwZXMnO1xuaW1wb3J0IHsgTmF0aXZlU2NyaXB0RGVidWcgfSBmcm9tICcuLi90cmFjZSc7XG5cbmV4cG9ydCBjbGFzcyBOYXRpdmVTY3JpcHRBbmltYXRpb25QbGF5ZXIgaW1wbGVtZW50cyBBbmltYXRpb25QbGF5ZXIge1xuICBwdWJsaWMgcGFyZW50UGxheWVyOiBBbmltYXRpb25QbGF5ZXIgPSBudWxsO1xuXG4gIHByaXZhdGUgX3N0YXJ0U3Vic2NyaXB0aW9uczogRnVuY3Rpb25bXSA9IFtdO1xuICBwcml2YXRlIF9kb25lU3Vic2NyaXB0aW9uczogRnVuY3Rpb25bXSA9IFtdO1xuICBwcml2YXRlIF9maW5pc2hlZCA9IGZhbHNlO1xuICBwcml2YXRlIF9zdGFydGVkID0gZmFsc2U7XG4gIHByaXZhdGUgYW5pbWF0aW9uOiBLZXlmcmFtZUFuaW1hdGlvbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRhcmdldDogTmdWaWV3LCBrZXlmcmFtZXM6IEtleWZyYW1lW10sIHByaXZhdGUgZHVyYXRpb246IG51bWJlciwgcHJpdmF0ZSBkZWxheTogbnVtYmVyLCBlYXNpbmc6IHN0cmluZykge1xuICAgIHRoaXMuaW5pdEtleWZyYW1lQW5pbWF0aW9uKGtleWZyYW1lcywgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcpO1xuICB9XG5cbiAgZ2V0IHRvdGFsVGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmRlbGF5ICsgdGhpcy5kdXJhdGlvbjtcbiAgfVxuXG4gIGluaXQoKTogdm9pZCB7fVxuXG4gIGhhc1N0YXJ0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0ZWQ7XG4gIH1cblxuICBvblN0YXJ0KGZuOiBGdW5jdGlvbik6IHZvaWQge1xuICAgIHRoaXMuX3N0YXJ0U3Vic2NyaXB0aW9ucy5wdXNoKGZuKTtcbiAgfVxuICBvbkRvbmUoZm46IEZ1bmN0aW9uKTogdm9pZCB7XG4gICAgdGhpcy5fZG9uZVN1YnNjcmlwdGlvbnMucHVzaChmbik7XG4gIH1cbiAgb25EZXN0cm95KGZuOiBGdW5jdGlvbik6IHZvaWQge1xuICAgIHRoaXMuX2RvbmVTdWJzY3JpcHRpb25zLnB1c2goZm4pO1xuICB9XG5cbiAgcGxheSgpOiB2b2lkIHtcbiAgICBpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcbiAgICAgIE5hdGl2ZVNjcmlwdERlYnVnLmFuaW1hdGlvbnNMb2coYE5hdGl2ZVNjcmlwdEFuaW1hdGlvblBsYXllci5wbGF5YCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmFuaW1hdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5fc3RhcnRlZCkge1xuICAgICAgdGhpcy5fc3RhcnRlZCA9IHRydWU7XG4gICAgICB0aGlzLl9zdGFydFN1YnNjcmlwdGlvbnMuZm9yRWFjaCgoZm4pID0+IGZuKCkpO1xuICAgICAgdGhpcy5fc3RhcnRTdWJzY3JpcHRpb25zID0gW107XG4gICAgfVxuXG4gICAgLy8gV2hlbiB0aGlzIGlzc3VlIGh0dHBzOi8vZ2l0aHViLmNvbS9OYXRpdmVTY3JpcHQvTmF0aXZlU2NyaXB0L2lzc3Vlcy83OTg0IGlzIGZpeGVzIGluIEBuYXRpdmVzY3JpcHQvY29yZVxuICAgIC8vIHdlIGNhbiBjaGFuZ2UgdGhpcyBmaXggYW5kIGFwcGx5IHRoZSBvbmUgdGhhdCBpcyByZWNvbW1lbmRlZCBpbiB0aGF0IGlzc3VlLlxuICAgIGlmICh0aGlzLnRhcmdldC5pc0xvYWRlZCkge1xuICAgICAgdGhpcy5wbGF5QW5pbWF0aW9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGFyZ2V0Lm9uKFZpZXcubG9hZGVkRXZlbnQsIHRoaXMub25UYXJnZXRMb2FkZWQuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBvblRhcmdldExvYWRlZChhcmdzOiBFdmVudERhdGEpIHtcbiAgICB0aGlzLnRhcmdldC5vZmYoVmlldy5sb2FkZWRFdmVudCwgdGhpcy5vblRhcmdldExvYWRlZCk7XG4gICAgdGhpcy5wbGF5QW5pbWF0aW9uKCk7XG4gIH1cblxuICBwcml2YXRlIHBsYXlBbmltYXRpb24oKSB7XG4gICAgdGhpcy5hbmltYXRpb25cbiAgICAgIC5wbGF5KHRoaXMudGFyZ2V0KVxuICAgICAgLnRoZW4oKCkgPT4gdGhpcy5vbkZpbmlzaCgpKVxuICAgICAgLmNhdGNoKChfZSkgPT4ge30pO1xuICB9XG5cbiAgcGF1c2UoKTogdm9pZCB7fVxuXG4gIGZpbmlzaCgpOiB2b2lkIHtcbiAgICB0aGlzLm9uRmluaXNoKCk7XG4gIH1cblxuICByZXNldCgpOiB2b2lkIHtcbiAgICBpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcbiAgICAgIE5hdGl2ZVNjcmlwdERlYnVnLmFuaW1hdGlvbnNMb2coYE5hdGl2ZVNjcmlwdEFuaW1hdGlvblBsYXllci5yZXNldGApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFuaW1hdGlvbiAmJiB0aGlzLmFuaW1hdGlvbi5pc1BsYXlpbmcpIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9uLmNhbmNlbCgpO1xuICAgIH1cbiAgfVxuXG4gIHJlc3RhcnQoKTogdm9pZCB7XG4gICAgaWYgKE5hdGl2ZVNjcmlwdERlYnVnLmlzTG9nRW5hYmxlZCgpKSB7XG4gICAgICBOYXRpdmVTY3JpcHREZWJ1Zy5hbmltYXRpb25zTG9nKGBOYXRpdmVTY3JpcHRBbmltYXRpb25QbGF5ZXIucmVzdGFydGApO1xuICAgIH1cblxuICAgIHRoaXMucmVzZXQoKTtcbiAgICB0aGlzLnBsYXkoKTtcbiAgfVxuXG4gIGRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKE5hdGl2ZVNjcmlwdERlYnVnLmlzTG9nRW5hYmxlZCgpKSB7XG4gICAgICBOYXRpdmVTY3JpcHREZWJ1Zy5hbmltYXRpb25zTG9nKGBOYXRpdmVTY3JpcHRBbmltYXRpb25QbGF5ZXIuZGVzdHJveWApO1xuICAgIH1cbiAgICB0aGlzLm9uRmluaXNoKCk7XG4gIH1cblxuICBzZXRQb3NpdGlvbihfcDogYW55KTogdm9pZCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBbmltYXRpb25QbGF5ZXIuc2V0UG9zaXRpb24gbWV0aG9kIGlzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIH1cblxuICBnZXRQb3NpdGlvbigpOiBudW1iZXIge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0S2V5ZnJhbWVBbmltYXRpb24oa2V5ZnJhbWVzOiBLZXlmcmFtZVtdLCBkdXJhdGlvbjogbnVtYmVyLCBkZWxheTogbnVtYmVyLCBlYXNpbmc6IHN0cmluZykge1xuICAgIGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuICAgICAgTmF0aXZlU2NyaXB0RGVidWcuYW5pbWF0aW9uc0xvZyhgTmF0aXZlU2NyaXB0QW5pbWF0aW9uUGxheWVyLmluaXRLZXlmcmFtZUFuaW1hdGlvbmApO1xuICAgIH1cblxuICAgIHRoaXMuYW5pbWF0aW9uID0gY3JlYXRlS2V5ZnJhbWVBbmltYXRpb24oa2V5ZnJhbWVzLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZyk7XG4gIH1cblxuICBwcml2YXRlIG9uRmluaXNoKCkge1xuICAgIGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuICAgICAgTmF0aXZlU2NyaXB0RGVidWcuYW5pbWF0aW9uc0xvZyhgTmF0aXZlU2NyaXB0QW5pbWF0aW9uUGxheWVyLm9uRmluaXNoYCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2ZpbmlzaGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fZmluaXNoZWQgPSB0cnVlO1xuICAgIHRoaXMuX3N0YXJ0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9kb25lU3Vic2NyaXB0aW9ucy5mb3JFYWNoKChmbikgPT4gZm4oKSk7XG4gICAgdGhpcy5fZG9uZVN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgfVxufVxuIl19