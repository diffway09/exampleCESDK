import { unsetValue } from '@nativescript/core';
import { getViewClass, getViewMeta, isKnownView } from './element-registry';
import { CommentNode, isContentView, isDetachedElement, isInvisibleNode, isLayout, isView, TextNode } from './views';
import { NativeScriptDebug } from './trace';
// Note: this utility exists from deep core import however results in
// Module not found: Error: Can't resolve '@nativescript/core/ui/core/properties'
function isCssVariable(property) {
    return /^--[^,\s]+?$/.test(property);
}
const ELEMENT_NODE_TYPE = 1;
const XML_ATTRIBUTES = Object.freeze(['style', 'rows', 'columns', 'fontAttributes']);
const whiteSpaceSplitter = /\s+/;
function printNgTree(view) {
    let parent = view;
    while (parent.parent && parent.parent.firstChild) {
        parent = parent.parent;
    }
    printChildrenRecurse(parent);
}
function printChildrenRecurse(parent) {
    const children = parent.firstChild ? [parent.firstChild, ...getChildrenSiblings(parent.firstChild).nextSiblings] : [];
    console.log(`parent: ${parent}, firstChild: ${parent.firstChild}, lastChild: ${parent.lastChild} children: ${children}`);
    if (parent.firstChild) {
        console.log(`----- start ${parent}`);
    }
    children.forEach((c) => printChildrenRecurse(c));
    if (parent.firstChild) {
        console.log(`----- end ${parent}`);
    }
}
function getChildrenSiblings(view) {
    const nextSiblings = [];
    const previousSiblings = [];
    let sibling = view.nextSibling;
    while (sibling) {
        nextSiblings.push(sibling);
        sibling = sibling.nextSibling;
    }
    sibling = view.previousSibling;
    while (sibling) {
        previousSiblings.push(sibling);
        sibling = sibling.previousSibling;
    }
    return {
        previousSiblings,
        nextSiblings,
    };
}
function printSiblingsTree(view) {
    const { previousSiblings, nextSiblings } = getChildrenSiblings(view);
    console.log(`${view} previousSiblings: ${previousSiblings} nextSiblings: ${nextSiblings}`);
}
// eslint-disable-next-line @typescript-eslint/ban-types
const propertyMaps = new Map();
export class ViewUtil {
    constructor(namespaceFilters, reuseViews) {
        this.namespaceFilters = namespaceFilters;
        this.reuseViews = reuseViews;
    }
    /**
     * Inserts a child into a parrent, preferably before next.
     * @param parent parent view
     * @param child child view to be added
     * @param previous previous element. If present, insert after this.
     * @param next next element. If present, insert before this (previous is ignored).
     */
    insertChild(parent, child, previous, next) {
        if (!parent) {
            return;
        }
        const extendedParent = this.ensureNgViewExtensions(parent);
        const extendedChild = this.ensureNgViewExtensions(child);
        // this should never enter, as angular is supposed to remove the child from the previous parent before calling this
        // but when angular animations are enabled, the removal might be delayed, so we need to ensure this view is not anywhere
        // this seems to only happens to CommentNodes
        if (extendedChild.parentNode) {
            this.removeChild(extendedChild.parentNode, extendedChild);
        }
        // if there's a next child, previous is the previousSibling of it
        if (next) {
            previous = next.previousSibling;
        }
        else if (previous) {
            // if there's a previous, next is the nextSibling of it
            next = previous.nextSibling;
        }
        else {
            // no previous or next, append to the parent
            previous = extendedParent.lastChild; // this can still be undefined if the parent has no children!
        }
        this.insertInList(extendedParent, extendedChild, previous, next);
        if (isDetachedElement(child) || isInvisibleNode(child)) {
            extendedChild.parentNode = extendedParent;
        }
        if (!isDetachedElement(child)) {
            const nextVisual = this.findNextVisual(next);
            this.addToVisualTree(extendedParent, extendedChild, nextVisual);
        }
        else if (isInvisibleNode(extendedChild)) {
            const nextVisual = this.findNextVisual(next);
            this.addInvisibleNode(extendedParent, extendedChild, nextVisual);
        }
        // printNgTree(extendedChild);
    }
    insertBefore(parent, child, refChild) {
        const extendedRef = refChild ? this.ensureNgViewExtensions(refChild) : undefined;
        this.insertChild(parent, child, undefined, extendedRef);
    }
    insertAfter(parent, child, refChild) {
        const extendedRef = refChild ? this.ensureNgViewExtensions(refChild) : undefined;
        this.insertChild(parent, child, extendedRef);
    }
    appendChild(parent, child) {
        this.insertChild(parent, child);
    }
    /**
     * Inserts a view into the parent/sibling linked list
     * !WARNING: this method makes no checks to validate the integrity of previous/next children
     * @param parent parent view
     * @param child child view
     * @param previous previous element. null/undefined for first element
     * @param next next element. null/undefined for last element
     */
    insertInList(parent, child, previous, next) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`ViewUtil.insertInList parent: ${parent}, view: ${child}, ` + `previous: ${previous}, next: ${next}`);
        }
        if (previous) {
            previous.nextSibling = child;
            child.previousSibling = previous;
        }
        else {
            parent.firstChild = child;
        }
        if (next) {
            child.nextSibling = next;
            next.previousSibling = child;
        }
        else {
            parent.lastChild = child;
        }
    }
    addToVisualTree(parent, child, next) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`ViewUtil.addToVisualTree parent: ${parent}, view: ${child}, next: ${next}`);
        }
        if (parent.meta && parent.meta.insertChild) {
            parent.meta.insertChild(parent, child, next);
        }
        else if (isLayout(parent)) {
            this.insertToLayout(parent, child, next);
        }
        else if (isContentView(parent)) {
            parent.content = child;
        }
        else if (parent && parent._addChildFromBuilder) {
            parent._addChildFromBuilder(child.nodeName, child);
        }
    }
    addInvisibleNode(parent, child, next) {
        if (parent.meta?.insertInvisibleNode) {
            parent.meta.insertInvisibleNode(parent, child, next);
        }
        else {
            if (child instanceof TextNode) {
                parent.text = child.text;
                child.registerTextChange((t) => (parent.text = t), parent);
            }
        }
    }
    insertToLayout(parent, child, next) {
        if (child.parent === parent) {
            this.removeLayoutChild(parent, child);
        }
        const nextVisual = this.findNextVisual(next);
        if (nextVisual) {
            const index = parent.getChildIndex(nextVisual);
            parent.insertChild(child, index);
        }
        else {
            parent.addChild(child);
        }
        // parent.eachChild((c) => {console.log(c); return true});
    }
    findNextVisual(view) {
        let next = view;
        while (next && isDetachedElement(next)) {
            next = next.nextSibling;
        }
        return next;
    }
    removeChild(parent, child) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`ViewUtil.removeChild parent: ${parent} child: ${child}`);
        }
        if (!parent) {
            return;
        }
        const extendedParent = this.ensureNgViewExtensions(parent);
        const extendedChild = this.ensureNgViewExtensions(child);
        extendedChild.parentNode = null;
        this.removeFromList(extendedParent, extendedChild);
        if (!isDetachedElement(extendedChild)) {
            this.removeFromVisualTree(extendedParent, extendedChild);
        }
        else if (isInvisibleNode(extendedChild)) {
            this.removeInvisibleNode(extendedParent, extendedChild);
        }
    }
    removeFromList(parent, child) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`ViewUtil.removeFromList parent: ${parent} child: ${child}`);
        }
        // only child. null everything
        if (parent.firstChild === child && parent.lastChild === child) {
            parent.firstChild = null;
            parent.lastChild = null;
            child.nextSibling = null;
            child.previousSibling = null;
            return;
        }
        const previous = child.previousSibling;
        const next = child.nextSibling;
        // is first child, make the next sibling the first child (can be null)
        if (parent.firstChild === child) {
            parent.firstChild = next;
        }
        // is last child, make the previous sibling the last child (can be null)
        if (parent.lastChild === child) {
            parent.lastChild = previous;
        }
        // we have a previous sibling, make it point to the next sibling
        if (previous) {
            previous.nextSibling = next;
        }
        // we have a next sibling, make it point to the previous
        if (next) {
            next.previousSibling = previous;
        }
        // finally, null the siblings
        child.nextSibling = null;
        child.previousSibling = null;
    }
    // NOTE: This one is O(n) - use carefully
    findPreviousElement(parent, child) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`ViewUtil.findPreviousElement parent: ${parent} child: ${child}`);
        }
        let previousVisual;
        if (isLayout(parent)) {
            previousVisual = this.getPreviousVisualElement(parent, child);
        }
        let previous = previousVisual || parent.firstChild;
        // since detached elements are not added to the visual tree,
        // we need to find the actual previous sibling of the view,
        // which may as well be an invisible node
        while (previous && previous !== child && previous.nextSibling !== child) {
            previous = previous.nextSibling;
        }
        return previous;
    }
    getPreviousVisualElement(parent, child) {
        const elementIndex = parent.getChildIndex(child);
        if (elementIndex > 0) {
            return parent.getChildAt(elementIndex - 1);
        }
    }
    // NOTE: This one is O(n) - use carefully
    getChildIndex(parent, child) {
        if (isLayout(parent)) {
            return parent.getChildIndex(child);
        }
        else if (isContentView(parent)) {
            return child === parent.content ? 0 : -1;
        }
    }
    removeFromVisualTree(parent, child) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`ViewUtil.removeFromVisualTree parent: ${parent} child: ${child}`);
        }
        if (parent.meta && parent.meta.removeChild) {
            parent.meta.removeChild(parent, child);
        }
        else if (isLayout(parent)) {
            this.removeLayoutChild(parent, child);
        }
        else if (isContentView(parent) && parent.content === child) {
            parent.content = null;
        }
        else if (isView(parent)) {
            parent._removeView(child);
        }
    }
    removeInvisibleNode(parent, child) {
        if (parent.meta?.removeInvisibleNode) {
            parent.meta.removeInvisibleNode(parent, child);
        }
        else {
            if (child instanceof TextNode) {
                child.unregisterTextChange(parent);
            }
        }
    }
    removeLayoutChild(parent, child) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`ViewUtil.removeLayoutChild parent: ${parent} child: ${child}`);
        }
        const index = parent.getChildIndex(child);
        if (index !== -1) {
            parent.removeChild(child);
        }
    }
    createComment(value) {
        return new CommentNode(value);
    }
    createText(value) {
        return new TextNode(value);
    }
    createView(name) {
        const originalName = name;
        if (!isKnownView(name)) {
            name = 'ProxyViewContainer';
        }
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`Creating view: ${originalName} ${name}`);
        }
        const viewClass = getViewClass(name);
        const view = new viewClass();
        const ngView = this.setNgViewExtensions(view, name);
        ngView.reusable = !!this.reuseViews;
        return ngView;
    }
    ensureNgViewExtensions(view) {
        if (Object.hasOwnProperty.call(view, 'meta')) {
            return view;
        }
        else {
            const name = view.cssType || view.typeName;
            const ngView = this.setNgViewExtensions(view, name);
            return ngView;
        }
    }
    setNgViewExtensions(view, name) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`Make into a NgView view: ${view} name: "${name}"`);
        }
        const ngView = view;
        ngView.nodeName = name;
        ngView.meta = getViewMeta(name);
        // we're setting the node type of the view
        // to 'element' because of checks done in the
        // dom animation engine
        ngView.nodeType = ELEMENT_NODE_TYPE;
        return ngView;
    }
    setProperty(view, attributeName, value, namespace) {
        if (!view || (namespace && !this.runsIn(namespace))) {
            return;
        }
        if (attributeName.indexOf('.') !== -1) {
            // Handle nested properties
            const properties = attributeName.split('.');
            attributeName = properties[properties.length - 1];
            let propMap = this.getProperties(view);
            let i = 0;
            while (i < properties.length - 1 && typeof view !== 'undefined') {
                let prop = properties[i];
                if (propMap.has(prop)) {
                    prop = propMap.get(prop);
                }
                view = view[prop];
                propMap = this.getProperties(view);
                i++;
            }
        }
        if (typeof view !== 'undefined') {
            this.setPropertyInternal(view, attributeName, value);
        }
    }
    runsIn(platform) {
        let runs = true;
        const last = () => true;
        if (this.namespaceFilters) {
            let chain = (p) => true;
            for (let i = this.namespaceFilters.length - 1; i >= 0; i--) {
                const currentChain = chain;
                chain = (p) => this.namespaceFilters[i].runsIn(p, currentChain);
            }
            runs = chain(platform);
            runs = runs !== false ? true : false; // undefined means true
            // this.namespaceFilters.some((filter) => {
            // 	const runsInFilter = filter.runsIn(platform);
            // 	if (runsInFilter !== undefined) {
            // 		runs = runsInFilter;
            // 		return true;
            // 	}
            // });
        }
        return runs;
    }
    setPropertyInternal(view, attributeName, value) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`Setting attribute: ${attributeName}=${value} to ${view}`);
        }
        if (attributeName === 'class') {
            this.setClasses(view, value);
            return;
        }
        if (XML_ATTRIBUTES.indexOf(attributeName) !== -1) {
            view[attributeName] = value;
            return;
        }
        const propMap = this.getProperties(view);
        const propertyName = propMap.get(attributeName);
        // Ensure the children of a collection currently have no parent set.
        if (Array.isArray(value)) {
            this.removeParentReferencesFromItems(value);
        }
        if (propertyName) {
            // We have a lower-upper case mapped property.
            view[propertyName] = value;
            return;
        }
        // Unknown attribute value -- just set it to our object as is.
        view[attributeName] = value;
    }
    removeParentReferencesFromItems(items) {
        for (const item of items) {
            if (item.parent && item.parentNode) {
                if (NativeScriptDebug.isLogEnabled()) {
                    NativeScriptDebug.viewUtilLog(`Unassigning parent ${item.parentNode} on value: ${item}`);
                }
                item.parent = undefined;
                item.parentNode = undefined;
            }
        }
    }
    getProperties(instance) {
        const type = instance && instance.constructor;
        if (!type) {
            return new Map();
        }
        if (!propertyMaps.has(type)) {
            const propMap = new Map();
            for (const propName in instance) {
                // tslint:disable:forin
                propMap.set(propName.toLowerCase(), propName);
            }
            propertyMaps.set(type, propMap);
        }
        return propertyMaps.get(type);
    }
    cssClasses(view) {
        if (!view.ngCssClasses) {
            view.ngCssClasses = new Map();
        }
        return view.ngCssClasses;
    }
    addClass(view, className) {
        const extendedView = this.ensureNgViewExtensions(view);
        this.cssClasses(extendedView).set(className, true);
        this.syncClasses(extendedView);
    }
    removeClass(view, className) {
        const extendedView = this.ensureNgViewExtensions(view);
        this.cssClasses(extendedView).delete(className);
        this.syncClasses(extendedView);
    }
    setClasses(view, classesValue) {
        const classes = classesValue.split(whiteSpaceSplitter);
        this.cssClasses(view).clear();
        classes.forEach((className) => this.cssClasses(view).set(className, true));
        this.syncClasses(view);
    }
    syncClasses(view) {
        const classValue = Array.from(this.cssClasses(view).keys()).join(' ');
        view.className = classValue;
    }
    setStyle(view, styleName, value) {
        if (isCssVariable(styleName)) {
            view.style.setUnscopedCssVariable(styleName, value);
            view._onCssStateChange();
        }
        else {
            view.style[styleName] = value;
        }
    }
    removeStyle(view, styleName) {
        if (isCssVariable(styleName)) {
            // TODO: expose this on core
            view.style.unscopedCssVariables.delete(styleName);
            view._onCssStateChange();
        }
        else {
            view.style[styleName] = unsetValue;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,