import { Injectable } from '@angular/core';
import { HttpResponse, HttpErrorResponse, HttpXhrBackend } from '@angular/common/http';
import { XhrFactory } from '@angular/common';
import { NSFileSystem } from '../file-system/ns-file-system';
import { isLocalRequest, processLocalFileRequest } from './http-utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../file-system/ns-file-system";
export class NsHttpBackEnd extends HttpXhrBackend {
    constructor(xhrFactory, nsFileSystem) {
        super(xhrFactory);
        this.nsFileSystem = nsFileSystem;
    }
    handle(req) {
        let result;
        if (isLocalRequest(req.url)) {
            result = this.handleLocalFileRequest(req.url);
        }
        else {
            result = super.handle(req);
        }
        return result;
    }
    handleLocalFileRequest(url) {
        return processLocalFileRequest(url, this.nsFileSystem, createSuccessResponse, createErrorResponse);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NsHttpBackEnd, deps: [{ token: i1.XhrFactory }, { token: i2.NSFileSystem }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NsHttpBackEnd }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NsHttpBackEnd, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.XhrFactory }, { type: i2.NSFileSystem }] });
function createSuccessResponse(url, body, status) {
    return new HttpResponse({
        url,
        body,
        status,
        statusText: 'OK',
    });
}
function createErrorResponse(url, body, status) {
    return new HttpErrorResponse({
        url,
        error: body,
        status,
        statusText: 'ERROR',
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnMtaHR0cC1iYWNrZW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci9zcmMvbGliL2h0dHAvbnMtaHR0cC1iYWNrZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUEwQixZQUFZLEVBQUUsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0csT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRzdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsY0FBYyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sY0FBYyxDQUFDOzs7O0FBR3ZFLE1BQU0sT0FBTyxhQUFjLFNBQVEsY0FBYztJQUMvQyxZQUFZLFVBQXNCLEVBQVUsWUFBMEI7UUFDcEUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRHdCLGlCQUFZLEdBQVosWUFBWSxDQUFjO0lBRXRFLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBcUI7UUFDMUIsSUFBSSxNQUFrQyxDQUFDO1FBRXZDLElBQUksY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzVCLE1BQU0sR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hELENBQUM7YUFBTSxDQUFDO1lBQ04sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0IsQ0FBQztRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFTyxzQkFBc0IsQ0FBQyxHQUFXO1FBQ3hDLE9BQU8sdUJBQXVCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUscUJBQXFCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUNyRyxDQUFDOzhHQW5CVSxhQUFhO2tIQUFiLGFBQWE7OzJGQUFiLGFBQWE7a0JBRHpCLFVBQVU7O0FBdUJYLFNBQVMscUJBQXFCLENBQUMsR0FBVyxFQUFFLElBQVMsRUFBRSxNQUFjO0lBQ25FLE9BQU8sSUFBSSxZQUFZLENBQUM7UUFDdEIsR0FBRztRQUNILElBQUk7UUFDSixNQUFNO1FBQ04sVUFBVSxFQUFFLElBQUk7S0FDakIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQUMsR0FBVyxFQUFFLElBQVMsRUFBRSxNQUFjO0lBQ2pFLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQztRQUMzQixHQUFHO1FBQ0gsS0FBSyxFQUFFLElBQUk7UUFDWCxNQUFNO1FBQ04sVUFBVSxFQUFFLE9BQU87S0FDcEIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBSZXF1ZXN0LCBIdHRwRXZlbnQsIEh0dHBSZXNwb25zZSwgSHR0cEVycm9yUmVzcG9uc2UsIEh0dHBYaHJCYWNrZW5kIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgWGhyRmFjdG9yeSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IE5TRmlsZVN5c3RlbSB9IGZyb20gJy4uL2ZpbGUtc3lzdGVtL25zLWZpbGUtc3lzdGVtJztcbmltcG9ydCB7IGlzTG9jYWxSZXF1ZXN0LCBwcm9jZXNzTG9jYWxGaWxlUmVxdWVzdCB9IGZyb20gJy4vaHR0cC11dGlscyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOc0h0dHBCYWNrRW5kIGV4dGVuZHMgSHR0cFhockJhY2tlbmQge1xuICBjb25zdHJ1Y3Rvcih4aHJGYWN0b3J5OiBYaHJGYWN0b3J5LCBwcml2YXRlIG5zRmlsZVN5c3RlbTogTlNGaWxlU3lzdGVtKSB7XG4gICAgc3VwZXIoeGhyRmFjdG9yeSk7XG4gIH1cblxuICBoYW5kbGUocmVxOiBIdHRwUmVxdWVzdDxhbnk+KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIGxldCByZXN1bHQ6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+O1xuXG4gICAgaWYgKGlzTG9jYWxSZXF1ZXN0KHJlcS51cmwpKSB7XG4gICAgICByZXN1bHQgPSB0aGlzLmhhbmRsZUxvY2FsRmlsZVJlcXVlc3QocmVxLnVybCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IHN1cGVyLmhhbmRsZShyZXEpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUxvY2FsRmlsZVJlcXVlc3QodXJsOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgcmV0dXJuIHByb2Nlc3NMb2NhbEZpbGVSZXF1ZXN0KHVybCwgdGhpcy5uc0ZpbGVTeXN0ZW0sIGNyZWF0ZVN1Y2Nlc3NSZXNwb25zZSwgY3JlYXRlRXJyb3JSZXNwb25zZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3VjY2Vzc1Jlc3BvbnNlKHVybDogc3RyaW5nLCBib2R5OiBhbnksIHN0YXR1czogbnVtYmVyKTogSHR0cEV2ZW50PGFueT4ge1xuICByZXR1cm4gbmV3IEh0dHBSZXNwb25zZSh7XG4gICAgdXJsLFxuICAgIGJvZHksXG4gICAgc3RhdHVzLFxuICAgIHN0YXR1c1RleHQ6ICdPSycsXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFcnJvclJlc3BvbnNlKHVybDogc3RyaW5nLCBib2R5OiBhbnksIHN0YXR1czogbnVtYmVyKTogSHR0cEVycm9yUmVzcG9uc2Uge1xuICByZXR1cm4gbmV3IEh0dHBFcnJvclJlc3BvbnNlKHtcbiAgICB1cmwsXG4gICAgZXJyb3I6IGJvZHksXG4gICAgc3RhdHVzLFxuICAgIHN0YXR1c1RleHQ6ICdFUlJPUicsXG4gIH0pO1xufVxuIl19