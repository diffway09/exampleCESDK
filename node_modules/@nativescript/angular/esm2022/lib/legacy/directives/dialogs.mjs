import { ApplicationRef, ComponentFactoryResolver, Injectable, Injector, NgZone } from '@angular/core';
import { Application, ContentView, Frame } from '@nativescript/core';
import { Subject } from 'rxjs';
import { AppHostAsyncView, AppHostView } from '../../app-host-view';
import { ComponentPortal } from '../../cdk/portal/common';
import { NativeScriptDomPortalOutlet } from '../../cdk/portal/nsdom-portal-outlet';
import { once } from '../../utils/general';
import { NgViewRef } from '../../view-refs';
import { NSLocationStrategy } from '../router/ns-location-strategy';
import * as i0 from "@angular/core";
import * as i1 from "../router/ns-location-strategy";
export class ModalDialogParams {
    constructor(context = {}, closeCallback) {
        this.context = context;
        this.closeCallback = closeCallback;
    }
}
export class ModalDialogService {
    constructor(location, zone, appRef, defaultInjector) {
        this.location = location;
        this.zone = zone;
        this.appRef = appRef;
        this.defaultInjector = defaultInjector;
    }
    /**
     * Emits anytime a modal is closed with the ModalDialogParams which were injected into the component which is now closing.
     * For example, can be used to wire up Rx flows outside the scope of just the component being handled.
     */
    get closed$() {
        if (!this._closed$) {
            this._closed$ = new Subject();
        }
        return this._closed$;
    }
    showModal(type, options = {}) {
        // if (!options.viewContainerRef) {
        //   throw new Error('No viewContainerRef: ' + 'Make sure you pass viewContainerRef in ModalDialogOptions.');
        // }
        let parentView = options.viewContainerRef?.element.nativeElement || Application.getRootView();
        if (options.target) {
            parentView = options.target;
        }
        if ((parentView instanceof AppHostView || parentView instanceof AppHostAsyncView) && parentView.ngAppRoot) {
            parentView = parentView.ngAppRoot;
        }
        // _ngDialogRoot is the first child of the previously detached proxy.
        // It should have 'viewController' (iOS) or '_dialogFragment' (Android) available for
        // presenting future modal views.
        if (parentView._ngDialogRoot) {
            parentView = parentView._ngDialogRoot;
        }
        // resolve from particular module (moduleRef)
        // or from same module as parentView (viewContainerRef)
        const componentInjector = options.moduleRef?.injector || options.viewContainerRef?.injector || this.defaultInjector;
        const resolver = componentInjector.get(ComponentFactoryResolver);
        let frame = parentView;
        if (!(parentView instanceof Frame)) {
            frame = (parentView.page && parentView.page.frame) || Frame.topmost();
        }
        this.location?._beginModalNavigation(frame);
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                try {
                    this._showDialog({
                        ...options,
                        containerRef: options.viewContainerRef,
                        injector: componentInjector,
                        context: options.context,
                        doneCallback: resolve,
                        parentView,
                        resolver,
                        type,
                    });
                }
                catch (err) {
                    reject(err);
                }
            }, 10);
        });
    }
    _showDialog(options) {
        let componentViewRef;
        let detachedLoaderRef;
        let portalOutlet;
        const closeCallback = once(async (...args) => {
            options.doneCallback.apply(undefined, args);
            if (componentViewRef) {
                componentViewRef.firstNativeLikeView.closeModal();
                const params = this.openedModalParams.pop();
                if (this._closed$) {
                    this._closed$.next(params);
                }
                await this.location._closeModalNavigation();
                if (detachedLoaderRef || portalOutlet) {
                    this.zone.run(() => {
                        portalOutlet?.dispose();
                        detachedLoaderRef?.instance.detectChanges();
                        detachedLoaderRef?.destroy();
                    });
                }
            }
        });
        const modalParams = new ModalDialogParams(options.context, closeCallback);
        if (!this.openedModalParams) {
            this.openedModalParams = [];
        }
        this.openedModalParams.push(modalParams);
        const childInjector = Injector.create({
            providers: [{ provide: ModalDialogParams, useValue: modalParams }],
            parent: options.injector,
        });
        this.zone.run(() => {
            // if we ever support templates in the old API
            // if(options.templateRef) {
            //     const detachedFactory = options.resolver.resolveComponentFactory(DetachedLoader);
            //     if(options.attachToContainerRef) {
            //         detachedLoaderRef = options.attachToContainerRef.createComponent(detachedFactory, 0, childInjector, null);
            //     } else {
            //         detachedLoaderRef = detachedFactory.create(childInjector); // this DetachedLoader is **completely** detached
            //         this.appRef.attachView(detachedLoaderRef.hostView); // we attach it to the applicationRef, so it becomes a "root" view in angular's hierarchy
            //     }
            //     detachedLoaderRef.changeDetectorRef.detectChanges(); // force a change detection
            //     detachedLoaderRef.instance.createTemplatePortal(options.templateRef);
            // }
            const targetView = new ContentView();
            const portal = new ComponentPortal(options.type);
            portalOutlet = new NativeScriptDomPortalOutlet(targetView, options.resolver, this.appRef, childInjector);
            const componentRef = portalOutlet.attach(portal);
            componentRef.changeDetectorRef.detectChanges();
            componentViewRef = new NgViewRef(componentRef);
            if (options.useContextAsComponentProps && options.context) {
                for (const key in options.context) {
                    componentViewRef.ref.instance[key] = options.context[key];
                }
            }
            if (componentViewRef !== componentRef.location.nativeElement) {
                componentRef.location.nativeElement._ngDialogRoot = componentViewRef.firstNativeLikeView;
            }
            // if we don't detach the view from its parent, ios gets mad
            componentViewRef.detachNativeLikeView();
            options.parentView.showModal(componentViewRef.firstNativeLikeView, { ...options, closeCallback });
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: ModalDialogService, deps: [{ token: i1.NSLocationStrategy }, { token: i0.NgZone }, { token: i0.ApplicationRef }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: ModalDialogService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: ModalDialogService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.NSLocationStrategy }, { type: i0.NgZone }, { type: i0.ApplicationRef }, { type: i0.Injector }] });
//# sourceMappingURL=data:application/json;base64,