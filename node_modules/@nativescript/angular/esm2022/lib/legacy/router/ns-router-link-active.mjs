import { ContentChildren, Directive, ElementRef, Input, QueryList, Renderer2 } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { containsTree } from './private-imports/router-url-tree';
import { NSRouterLink } from './ns-router-link';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
/**
 * The NSRouterLinkActive directive lets you add a CSS class to an element when the link"s route
 * becomes active.
 *
 * Consider the following example:
 *
 * ```
 * <a [nsRouterLink]="/user/bob" [nsRouterLinkActive]="active-link">Bob</a>
 * ```
 *
 * When the url is either "/user" or "/user/bob", the active-link class will
 * be added to the component. If the url changes, the class will be removed.
 *
 * You can set more than one class, as follows:
 *
 * ```
 * <a [nsRouterLink]="/user/bob" [nsRouterLinkActive]="class1 class2">Bob</a>
 * <a [nsRouterLink]="/user/bob" [nsRouterLinkActive]="["class1", "class2"]">Bob</a>
 * ```
 *
 * You can configure NSRouterLinkActive by passing `exact: true`. This will add the
 * classes only when the url matches the link exactly.
 *
 * ```
 * <a [nsRouterLink]="/user/bob" [nsRouterLinkActive]="active-link"
 * [nsRouterLinkActiveOptions]="{exact: true}">Bob</a>
 * ```
 *
 * Finally, you can apply the NSRouterLinkActive directive to an ancestor of a RouterLink.
 *
 * ```
 * <div [nsRouterLinkActive]="active-link" [nsRouterLinkActiveOptions]="{exact: true}">
 *   <a [nsRouterLink]="/user/jim">Jim</a>
 *   <a [nsRouterLink]="/user/bob">Bob</a>
 * </div>
 * ```
 *
 * This will set the active-link class on the div tag if the url is either "/user/jim" or
 * "/user/bob".
 *
 * @stable
 */
export class NSRouterLinkActive {
    constructor(router, element, renderer) {
        this.router = router;
        this.element = element;
        this.renderer = renderer;
        this.classes = [];
        this.active = false;
        this.nsRouterLinkActiveOptions = { exact: false };
        this.subscription = router.events.subscribe((s) => {
            if (s instanceof NavigationEnd) {
                this.update();
            }
        });
    }
    get isActive() {
        return this.active;
    }
    ngAfterContentInit() {
        this.links.changes.subscribe(() => this.update());
        this.update();
    }
    set nsRouterLinkActive(data) {
        if (Array.isArray(data)) {
            this.classes = data;
        }
        else {
            this.classes = data.split(' ');
        }
    }
    ngOnChanges() {
        this.update();
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    update() {
        if (!this.links) {
            return;
        }
        const hasActiveLinks = this.hasActiveLinks();
        // react only when status has changed to prevent unnecessary dom updates
        if (this.active !== hasActiveLinks) {
            const currentUrlTree = this.router.parseUrl(this.router.url);
            const isActiveLinks = this.reduceList(currentUrlTree, this.links);
            this.classes.forEach((c) => {
                if (isActiveLinks) {
                    this.renderer.addClass(this.element.nativeElement, c);
                }
                else {
                    this.renderer.removeClass(this.element.nativeElement, c);
                }
            });
        }
        Promise.resolve(hasActiveLinks).then((active) => (this.active = active));
    }
    reduceList(currentUrlTree, q) {
        return q.reduce((res, link) => {
            return res || containsTree(currentUrlTree, link.urlTree, this.nsRouterLinkActiveOptions.exact);
        }, false);
    }
    isLinkActive(router) {
        return (link) => router.isActive(link.urlTree, this.nsRouterLinkActiveOptions.exact);
    }
    hasActiveLinks() {
        return this.links.some(this.isLinkActive(this.router));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NSRouterLinkActive, deps: [{ token: i1.Router }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: NSRouterLinkActive, isStandalone: true, selector: "[nsRouterLinkActive]", inputs: { nsRouterLinkActiveOptions: "nsRouterLinkActiveOptions", nsRouterLinkActive: "nsRouterLinkActive" }, queries: [{ propertyName: "links", predicate: NSRouterLink }], exportAs: ["routerLinkActive"], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NSRouterLinkActive, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nsRouterLinkActive]',
                    exportAs: 'routerLinkActive',
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i1.Router }, { type: i0.ElementRef }, { type: i0.Renderer2 }], propDecorators: { links: [{
                type: ContentChildren,
                args: [NSRouterLink]
            }], nsRouterLinkActiveOptions: [{
                type: Input
            }], nsRouterLinkActive: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,