import { Directive, ElementRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { TabViewItem } from '@nativescript/core';
import { InvisibleNode } from '../../views';
import { NativeScriptDebug } from '../../trace';
import { isBlank } from '../../utils';
import * as i0 from "@angular/core";
export class TabViewDirective {
    get selectedIndex() {
        return this._selectedIndex;
    }
    set selectedIndex(value) {
        this._selectedIndex = value;
        if (this.viewInitialized) {
            this.tabView.selectedIndex = this._selectedIndex;
        }
    }
    constructor(element) {
        this.tabView = element.nativeElement;
    }
    ngAfterViewInit() {
        this.viewInitialized = true;
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog('this._selectedIndex: ' + this._selectedIndex);
        }
        if (!isBlank(this._selectedIndex)) {
            this.tabView.selectedIndex = this._selectedIndex;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: TabViewDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: TabViewDirective, isStandalone: true, selector: "TabView", inputs: { selectedIndex: "selectedIndex" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: TabViewDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'TabView', // eslint-disable-line @angular-eslint/directive-selector
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { selectedIndex: [{
                type: Input
            }] } });
export class TabViewItemDirective {
    constructor(owner, templateRef, viewContainer) {
        this.owner = owner;
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
    }
    set config(config) {
        if (!this._config || this._config.iconSource !== config.iconSource || this._config.title !== config.title || this._config.textTransform !== config.textTransform) {
            this._config = config;
            this.applyConfig();
        }
    }
    get config() {
        // tslint:disable-line:no-input-rename
        return this._config || {};
    }
    set title(title) {
        this.config = Object.assign(this.config, { title });
    }
    get title() {
        return this.config.title;
    }
    set iconSource(iconSource) {
        this.config = Object.assign(this.config, { iconSource });
    }
    get iconSource() {
        return this.config.iconSource;
    }
    set textTransform(textTransform) {
        this.config = Object.assign(this.config, { textTransform });
    }
    get textTransform() {
        return this.config.textTransform;
    }
    ensureItem() {
        if (!this.item) {
            this.item = new TabViewItem();
        }
    }
    applyConfig() {
        this.ensureItem();
        if (this.config.title) {
            this.item.title = this.config.title;
        }
        if (this.config.iconSource) {
            this.item.iconSource = this.config.iconSource;
        }
        //  TabViewItem textTransform has a default value for Android that kick in
        // only if no value (even a null value) is set.
        if (this.config.textTransform) {
            this.item.textTransform = this.config.textTransform;
        }
    }
    ngOnInit() {
        this.applyConfig();
        const viewRef = this.viewContainer.createEmbeddedView(this.templateRef);
        // Filter out text nodes and comments
        const realViews = viewRef.rootNodes.filter((node) => !(node instanceof InvisibleNode));
        if (realViews.length > 0) {
            this.item.view = realViews[0];
            const newItems = (this.owner.tabView.items || []).concat([this.item]);
            this.owner.tabView.items = newItems;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: TabViewItemDirective, deps: [{ token: TabViewDirective }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: TabViewItemDirective, isStandalone: true, selector: "[tabItem]", inputs: { config: ["tabItem", "config"], title: "title", iconSource: "iconSource", textTransform: "textTransform" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: TabViewItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tabItem]', // eslint-disable-line @angular-eslint/directive-selector
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: TabViewDirective }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }], propDecorators: { config: [{
                type: Input,
                args: ['tabItem']
            }], title: [{
                type: Input
            }], iconSource: [{
                type: Input
            }], textTransform: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,