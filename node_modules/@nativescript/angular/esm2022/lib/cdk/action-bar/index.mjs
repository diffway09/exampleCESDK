import { Directive, Component, ElementRef, Optional } from '@angular/core';
import { ActionBar, ActionItem, NavigationButton, Page } from '@nativescript/core';
import { isBlank } from '../../utils/lang-facade';
import { isInvisibleNode, isView } from '../../views/utils';
import { registerElement } from '../../element-registry';
import * as i0 from "@angular/core";
import * as i1 from "@nativescript/core";
export function isActionItem(view) {
    return view instanceof ActionItem;
}
export function isNavigationButton(view) {
    return view instanceof NavigationButton;
}
export const actionBarMeta = {
    skipAddToDom: true,
    insertChild: (parent, child, next) => {
        if (isInvisibleNode(child)) {
            return;
        }
        else if (isNavigationButton(child)) {
            parent.navigationButton = child;
            child.parentNode = parent;
        }
        else if (isActionItem(child)) {
            addActionItem(parent, child, next);
            child.parentNode = parent;
        }
        else if (isView(child)) {
            parent.titleView = child;
        }
    },
    removeChild: (parent, child) => {
        if (isInvisibleNode(child)) {
            return;
        }
        else if (isNavigationButton(child)) {
            if (parent.navigationButton === child) {
                parent.navigationButton = null;
            }
            child.parentNode = null;
        }
        else if (isActionItem(child)) {
            parent.actionItems.removeItem(child);
            child.parentNode = null;
        }
        else if (isView(child) && parent.titleView && parent.titleView === child) {
            parent.titleView = null;
        }
    },
};
registerElement('ActionBar', () => ActionBar, actionBarMeta);
registerElement('ActionItem', () => ActionItem);
registerElement('NavigationButton', () => NavigationButton);
const addActionItem = (bar, item, next) => {
    if (next) {
        insertActionItemBefore(bar, item, next);
    }
    else {
        appendActionItem(bar, item);
    }
};
const insertActionItemBefore = (bar, item, next) => {
    const actionItems = bar.actionItems;
    const actionItemsCollection = actionItems.getItems();
    const indexToInsert = actionItemsCollection.indexOf(next);
    actionItemsCollection.splice(indexToInsert, 0, item);
    actionItems.setItems(actionItemsCollection);
};
const appendActionItem = (bar, item) => {
    bar.actionItems.addItem(item);
};
export class ActionBarComponent {
    constructor(element, page) {
        this.element = element;
        this.page = page;
        if (!this.page) {
            throw new Error('No Page found in ActionBarComponent.\n' + 'Only a Page can contain an ActionBar, so please ensure ActionBar is only used inside a Component that is routed via page-router-outlet or is contained in a Page.\n' + 'Example for root action bars in AppComponent: <Frame><Page><ActionBar>....</ActionBar></Page></Frame>');
        }
        if (isBlank(this.page.actionBarHidden)) {
            this.page.actionBarHidden = false;
        }
        this.page.actionBar = this.element.nativeElement;
        this.page.actionBar.update();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: ActionBarComponent, deps: [{ token: i0.ElementRef }, { token: i1.Page, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.1.0", type: ActionBarComponent, isStandalone: true, selector: "ActionBar", ngImport: i0, template: '<ng-content></ng-content>', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: ActionBarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ActionBar',
                    template: '<ng-content></ng-content>',
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.Page, decorators: [{
                    type: Optional
                }] }] });
// eslint-disable-next-line @angular-eslint/component-class-suffix
export class ActionBarScope {
    // tslint:disable-line:component-class-suffix
    constructor(page) {
        this.page = page;
        if (!this.page) {
            throw new Error('Inside ActionBarExtension but no ActionBar found to extend.');
        }
    }
    onNavButtonInit(navBtn) {
        this.page.actionBar.navigationButton = navBtn.element.nativeElement;
    }
    onNavButtonDestroy(navBtn) {
        const nav = navBtn.element.nativeElement;
        if (nav && this.page.actionBar.navigationButton === nav) {
            this.page.actionBar.navigationButton = null;
        }
    }
    onActionInit(item) {
        this.page.actionBar.actionItems.addItem(item.element.nativeElement);
    }
    onActionDestroy(item) {
        if (item.element.nativeElement.actionBar) {
            this.page.actionBar.actionItems.removeItem(item.element.nativeElement);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: ActionBarScope, deps: [{ token: i1.Page, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.1.0", type: ActionBarScope, isStandalone: true, selector: "ActionBarExtension", ngImport: i0, template: '', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: ActionBarScope, decorators: [{
            type: Component,
            args: [{
                    selector: 'ActionBarExtension',
                    template: '',
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i1.Page, decorators: [{
                    type: Optional
                }] }] });
export class ActionItemDirective {
    constructor(element, ownerScope) {
        this.element = element;
        this.ownerScope = ownerScope;
        if (this.ownerScope) {
            this.ownerScope.onActionInit(this);
        }
    }
    ngOnDestroy() {
        if (this.ownerScope) {
            this.ownerScope.onActionDestroy(this);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: ActionItemDirective, deps: [{ token: i0.ElementRef }, { token: ActionBarScope, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: ActionItemDirective, isStandalone: true, selector: "ActionItem", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: ActionItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ActionItem', // tslint:disable-line:directive-selector
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: ActionBarScope, decorators: [{
                    type: Optional
                }] }] });
export class NavigationButtonDirective {
    constructor(element, ownerScope) {
        this.element = element;
        this.ownerScope = ownerScope;
        if (this.ownerScope) {
            this.ownerScope.onNavButtonInit(this);
        }
    }
    ngOnDestroy() {
        if (this.ownerScope) {
            this.ownerScope.onNavButtonDestroy(this);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NavigationButtonDirective, deps: [{ token: i0.ElementRef }, { token: ActionBarScope, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: NavigationButtonDirective, isStandalone: true, selector: "NavigationButton", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NavigationButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'NavigationButton', // tslint:disable-line:directive-selector
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: ActionBarScope, decorators: [{
                    type: Optional
                }] }] });
//# sourceMappingURL=data:application/json;base64,