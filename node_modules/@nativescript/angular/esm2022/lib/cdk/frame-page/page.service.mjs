import { ElementRef, Injectable, Optional } from '@angular/core';
import { Page, ViewBase } from '@nativescript/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@nativescript/core";
export class PageService {
    get inPage() {
        return this._inPage$.value;
    }
    get inPage$() {
        return this._inPage$.pipe(distinctUntilChanged());
    }
    get pageEvents$() {
        return this._pageEvents$.asObservable();
    }
    constructor(page, elRef, view) {
        this._pageEvents$ = new Subject();
        if (page) {
            this.page = page;
        }
        else {
            view = view || elRef.nativeElement;
            while (view) {
                if (view instanceof Page) {
                    this.page = view;
                    break;
                }
                view = view.parent;
            }
        }
        this._inPage$ = new BehaviorSubject(!!this.page?.isLoaded);
        if (this.page) {
            this.page.on('navigatedFrom', this.pageEvent, this);
            this.page.on('navigatedTo', this.pageEvent, this);
            this.page.on('navigatingFrom', this.pageEvent, this);
            this.page.on('navigatingTo', this.pageEvent, this);
        }
    }
    ngOnDestroy() {
        if (this.page) {
            this.page.off('navigatedFrom', this.pageEvent, this);
            this.page.off('navigatedTo', this.pageEvent, this);
            this.page.off('navigatingFrom', this.pageEvent, this);
            this.page.off('navigatingTo', this.pageEvent, this);
        }
        this._inPage$.complete();
        this._pageEvents$.complete();
    }
    pageEvent(evt) {
        this._pageEvents$.next(evt);
        switch (evt.eventName) {
            case 'navigatedTo':
                this._inPage$.next(true);
                break;
            case 'navigatedFrom':
                this._inPage$.next(false);
                break;
            default:
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: PageService, deps: [{ token: i1.Page, optional: true }, { token: i0.ElementRef, optional: true }, { token: i1.ViewBase, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: PageService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: PageService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.Page, decorators: [{
                    type: Optional
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Optional
                }] }, { type: i1.ViewBase, decorators: [{
                    type: Optional
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci9zcmMvbGliL2Nkay9mcmFtZS1wYWdlL3BhZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFVLFVBQVUsRUFBYSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEYsT0FBTyxFQUFpQixJQUFJLEVBQVEsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekUsT0FBTyxFQUFFLGVBQWUsRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUd0RCxNQUFNLE9BQU8sV0FBVztJQUt0QixJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO0lBQzdCLENBQUM7SUFDRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBQ0QsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFDRCxZQUF3QixJQUFXLEVBQWMsS0FBNEIsRUFBYyxJQUFlO1FBWGxHLGlCQUFZLEdBQUcsSUFBSSxPQUFPLEVBQWlCLENBQUM7UUFZbEQsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUNULElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ25CLENBQUM7YUFBTSxDQUFDO1lBQ04sSUFBSSxHQUFHLElBQUksSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDO1lBQ25DLE9BQU8sSUFBSSxFQUFFLENBQUM7Z0JBQ1osSUFBSSxJQUFJLFlBQVksSUFBSSxFQUFFLENBQUM7b0JBQ3pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO29CQUNqQixNQUFNO2dCQUNSLENBQUM7Z0JBQ0QsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDckIsQ0FBQztRQUNILENBQUM7UUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksZUFBZSxDQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3BFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDcEQsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDbEQsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNyRCxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNyRCxDQUFDO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3JELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ25ELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdEQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdEQsQ0FBQztRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRU8sU0FBUyxDQUFDLEdBQWtCO1FBQ2xDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLFFBQVEsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3RCLEtBQUssYUFBYTtnQkFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3pCLE1BQU07WUFDUixLQUFLLGVBQWU7Z0JBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMxQixNQUFNO1lBQ1IsUUFBUTtRQUNWLENBQUM7SUFDSCxDQUFDOzhHQTFEVSxXQUFXO2tIQUFYLFdBQVc7OzJGQUFYLFdBQVc7a0JBRHZCLFVBQVU7OzBCQWVJLFFBQVE7OzBCQUFpQixRQUFROzswQkFBa0MsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEluamVjdCwgSW5qZWN0YWJsZSwgT25EZXN0cm95LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmF2aWdhdGVkRGF0YSwgUGFnZSwgVmlldywgVmlld0Jhc2UgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBhZ2VTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcGFnZTogUGFnZTtcbiAgcHJpdmF0ZSBfaW5QYWdlJDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+O1xuICBwcml2YXRlIF9wYWdlRXZlbnRzJCA9IG5ldyBTdWJqZWN0PE5hdmlnYXRlZERhdGE+KCk7XG5cbiAgZ2V0IGluUGFnZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faW5QYWdlJC52YWx1ZTtcbiAgfVxuICBnZXQgaW5QYWdlJCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5faW5QYWdlJC5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpO1xuICB9XG4gIGdldCBwYWdlRXZlbnRzJCgpOiBPYnNlcnZhYmxlPE5hdmlnYXRlZERhdGE+IHtcbiAgICByZXR1cm4gdGhpcy5fcGFnZUV2ZW50cyQuYXNPYnNlcnZhYmxlKCk7XG4gIH1cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcGFnZT86IFBhZ2UsIEBPcHRpb25hbCgpIGVsUmVmPzogRWxlbWVudFJlZjxWaWV3QmFzZT4sIEBPcHRpb25hbCgpIHZpZXc/OiBWaWV3QmFzZSkge1xuICAgIGlmIChwYWdlKSB7XG4gICAgICB0aGlzLnBhZ2UgPSBwYWdlO1xuICAgIH0gZWxzZSB7XG4gICAgICB2aWV3ID0gdmlldyB8fCBlbFJlZi5uYXRpdmVFbGVtZW50O1xuICAgICAgd2hpbGUgKHZpZXcpIHtcbiAgICAgICAgaWYgKHZpZXcgaW5zdGFuY2VvZiBQYWdlKSB7XG4gICAgICAgICAgdGhpcy5wYWdlID0gdmlldztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB2aWV3ID0gdmlldy5wYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2luUGFnZSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KCEhdGhpcy5wYWdlPy5pc0xvYWRlZCk7XG4gICAgaWYgKHRoaXMucGFnZSkge1xuICAgICAgdGhpcy5wYWdlLm9uKCduYXZpZ2F0ZWRGcm9tJywgdGhpcy5wYWdlRXZlbnQsIHRoaXMpO1xuICAgICAgdGhpcy5wYWdlLm9uKCduYXZpZ2F0ZWRUbycsIHRoaXMucGFnZUV2ZW50LCB0aGlzKTtcbiAgICAgIHRoaXMucGFnZS5vbignbmF2aWdhdGluZ0Zyb20nLCB0aGlzLnBhZ2VFdmVudCwgdGhpcyk7XG4gICAgICB0aGlzLnBhZ2Uub24oJ25hdmlnYXRpbmdUbycsIHRoaXMucGFnZUV2ZW50LCB0aGlzKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5wYWdlKSB7XG4gICAgICB0aGlzLnBhZ2Uub2ZmKCduYXZpZ2F0ZWRGcm9tJywgdGhpcy5wYWdlRXZlbnQsIHRoaXMpO1xuICAgICAgdGhpcy5wYWdlLm9mZignbmF2aWdhdGVkVG8nLCB0aGlzLnBhZ2VFdmVudCwgdGhpcyk7XG4gICAgICB0aGlzLnBhZ2Uub2ZmKCduYXZpZ2F0aW5nRnJvbScsIHRoaXMucGFnZUV2ZW50LCB0aGlzKTtcbiAgICAgIHRoaXMucGFnZS5vZmYoJ25hdmlnYXRpbmdUbycsIHRoaXMucGFnZUV2ZW50LCB0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5faW5QYWdlJC5jb21wbGV0ZSgpO1xuICAgIHRoaXMuX3BhZ2VFdmVudHMkLmNvbXBsZXRlKCk7XG4gIH1cblxuICBwcml2YXRlIHBhZ2VFdmVudChldnQ6IE5hdmlnYXRlZERhdGEpIHtcbiAgICB0aGlzLl9wYWdlRXZlbnRzJC5uZXh0KGV2dCk7XG4gICAgc3dpdGNoIChldnQuZXZlbnROYW1lKSB7XG4gICAgICBjYXNlICduYXZpZ2F0ZWRUbyc6XG4gICAgICAgIHRoaXMuX2luUGFnZSQubmV4dCh0cnVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICduYXZpZ2F0ZWRGcm9tJzpcbiAgICAgICAgdGhpcy5faW5QYWdlJC5uZXh0KGZhbHNlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfVxufVxuIl19