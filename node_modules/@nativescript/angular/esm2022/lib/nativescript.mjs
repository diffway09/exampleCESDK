import { ViewportScroller, XhrFactory, ɵNullViewportScroller as NullViewportScroller } from '@angular/common';
import { ApplicationModule, ErrorHandler, Inject, NgModule, NO_ERRORS_SCHEMA, Optional, RendererFactory2, SkipSelf, ɵINJECTOR_SCOPE as INJECTOR_SCOPE } from '@angular/core';
import { Color, Device } from '@nativescript/core';
import { AppHostView } from './app-host-view';
import { NativescriptXhrFactory } from './nativescript-xhr-factory';
import { NativeScriptRendererFactory } from './nativescript-renderer';
import { PlatformNamespaceFilter, NAMESPACE_FILTERS } from './property-filter';
import { APP_ROOT_VIEW, DEVICE, ENABLE_REUSABE_VIEWS, NATIVESCRIPT_ROOT_MODULE_ID } from './tokens';
import { ViewUtil } from './view-util';
import { DetachedLoader } from './cdk/detached-loader';
import { NativeScriptCommonModule } from './nativescript-common.module';
import * as i0 from "@angular/core";
export function generateFallbackRootView(parentRootView) {
    if (parentRootView) {
        return parentRootView;
    }
    return new AppHostView(new Color('white'));
}
export function errorHandler() {
    return new ErrorHandler();
}
export function generateRandomId() {
    return `${Date.now()}` + '_' + Math.random().toString(36).substr(2, 9);
}
export const NATIVESCRIPT_MODULE_STATIC_PROVIDERS = [
    { provide: APP_ROOT_VIEW, useFactory: generateFallbackRootView, deps: [[new Optional(), new SkipSelf(), APP_ROOT_VIEW]] },
    { provide: INJECTOR_SCOPE, useValue: 'root' },
    { provide: ErrorHandler, useFactory: errorHandler, deps: [] },
    { provide: ViewUtil, useClass: ViewUtil, deps: [NAMESPACE_FILTERS, [new Optional(), ENABLE_REUSABE_VIEWS]] },
    {
        provide: NativeScriptRendererFactory,
        useClass: NativeScriptRendererFactory,
        deps: [APP_ROOT_VIEW, NAMESPACE_FILTERS, NATIVESCRIPT_ROOT_MODULE_ID, [new Optional(), ENABLE_REUSABE_VIEWS]],
    },
    { provide: NATIVESCRIPT_ROOT_MODULE_ID, useFactory: generateRandomId },
    { provide: RendererFactory2, useExisting: NativeScriptRendererFactory },
    { provide: NAMESPACE_FILTERS, useClass: PlatformNamespaceFilter, deps: [DEVICE], multi: true },
    { provide: DEVICE, useValue: Device },
    { provide: XhrFactory, useClass: NativescriptXhrFactory, deps: [] },
];
export const NATIVESCRIPT_MODULE_PROVIDERS = [{ provide: ViewportScroller, useClass: NullViewportScroller }];
export class NativeScriptModule {
    constructor(parentModule) {
        if (parentModule) {
            throw new Error(`NativeScriptModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NativeScriptModule, deps: [{ token: NativeScriptModule, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.1.0", ngImport: i0, type: NativeScriptModule, imports: [ApplicationModule, DetachedLoader, NativeScriptCommonModule], exports: [ApplicationModule, DetachedLoader, NativeScriptCommonModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NativeScriptModule, providers: [...NATIVESCRIPT_MODULE_STATIC_PROVIDERS, ...NATIVESCRIPT_MODULE_PROVIDERS], imports: [ApplicationModule, NativeScriptCommonModule, ApplicationModule, NativeScriptCommonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NativeScriptModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [ApplicationModule, DetachedLoader, NativeScriptCommonModule],
                    providers: [...NATIVESCRIPT_MODULE_STATIC_PROVIDERS, ...NATIVESCRIPT_MODULE_PROVIDERS],
                    exports: [ApplicationModule, DetachedLoader, NativeScriptCommonModule],
                    schemas: [NO_ERRORS_SCHEMA],
                }]
        }], ctorParameters: () => [{ type: NativeScriptModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }, {
                    type: Inject,
                    args: [NativeScriptModule]
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlc2NyaXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci9zcmMvbGliL25hdGl2ZXNjcmlwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLHFCQUFxQixJQUFJLG9CQUFvQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUcsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBWSxnQkFBZ0IsRUFBRSxRQUFRLEVBQWtCLGVBQWUsSUFBSSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdk0sT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQVEsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDL0UsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsb0JBQW9CLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDcEcsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN2QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdkQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7O0FBRXhFLE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxjQUFxQjtJQUM1RCxJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQ25CLE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENB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LEdBQUcsNkJBQTZCLENBQUM7b0JBQ3RGLE9BQU8sRUFBRSxDQUFDLGlCQUFpQixFQUFFLGNBQWMsRUFBRSx3QkFBd0IsQ0FBQztvQkFDdEUsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7aUJBQzVCOzswQkFFYyxRQUFROzswQkFBSSxRQUFROzswQkFBSSxNQUFNOzJCQUFDLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXdwb3J0U2Nyb2xsZXIsIFhockZhY3RvcnksIMm1TnVsbFZpZXdwb3J0U2Nyb2xsZXIgYXMgTnVsbFZpZXdwb3J0U2Nyb2xsZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQXBwbGljYXRpb25Nb2R1bGUsIEVycm9ySGFuZGxlciwgSW5qZWN0LCBOZ01vZHVsZSwgTk9fRVJST1JTX1NDSEVNQSwgT3B0aW9uYWwsIFByb3ZpZGVyLCBSZW5kZXJlckZhY3RvcnkyLCBTa2lwU2VsZiwgU3RhdGljUHJvdmlkZXIsIMm1SU5KRUNUT1JfU0NPUEUgYXMgSU5KRUNUT1JfU0NPUEUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbG9yLCBEZXZpY2UsIFZpZXcgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuaW1wb3J0IHsgQXBwSG9zdFZpZXcgfSBmcm9tICcuL2FwcC1ob3N0LXZpZXcnO1xuaW1wb3J0IHsgTmF0aXZlc2NyaXB0WGhyRmFjdG9yeSB9IGZyb20gJy4vbmF0aXZlc2NyaXB0LXhoci1mYWN0b3J5JztcbmltcG9ydCB7IE5hdGl2ZVNjcmlwdFJlbmRlcmVyRmFjdG9yeSB9IGZyb20gJy4vbmF0aXZlc2NyaXB0LXJlbmRlcmVyJztcbmltcG9ydCB7IFBsYXRmb3JtTmFtZXNwYWNlRmlsdGVyLCBOQU1FU1BBQ0VfRklMVEVSUyB9IGZyb20gJy4vcHJvcGVydHktZmlsdGVyJztcbmltcG9ydCB7IEFQUF9ST09UX1ZJRVcsIERFVklDRSwgRU5BQkxFX1JFVVNBQkVfVklFV1MsIE5BVElWRVNDUklQVF9ST09UX01PRFVMRV9JRCB9IGZyb20gJy4vdG9rZW5zJztcbmltcG9ydCB7IFZpZXdVdGlsIH0gZnJvbSAnLi92aWV3LXV0aWwnO1xuaW1wb3J0IHsgRGV0YWNoZWRMb2FkZXIgfSBmcm9tICcuL2Nkay9kZXRhY2hlZC1sb2FkZXInO1xuaW1wb3J0IHsgTmF0aXZlU2NyaXB0Q29tbW9uTW9kdWxlIH0gZnJvbSAnLi9uYXRpdmVzY3JpcHQtY29tbW9uLm1vZHVsZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUZhbGxiYWNrUm9vdFZpZXcocGFyZW50Um9vdFZpZXc/OiBWaWV3KSB7XG4gIGlmIChwYXJlbnRSb290Vmlldykge1xuICAgIHJldHVybiBwYXJlbnRSb290VmlldztcbiAgfVxuICByZXR1cm4gbmV3IEFwcEhvc3RWaWV3KG5ldyBDb2xvcignd2hpdGUnKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlcnJvckhhbmRsZXIoKSB7XG4gIHJldHVybiBuZXcgRXJyb3JIYW5kbGVyKCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb21JZCgpIHtcbiAgcmV0dXJuIGAke0RhdGUubm93KCl9YCArICdfJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KTtcbn1cblxuZXhwb3J0IGNvbnN0IE5BVElWRVNDUklQVF9NT0RVTEVfU1RBVElDX1BST1ZJREVSUzogU3RhdGljUHJvdmlkZXJbXSA9IFtcbiAgeyBwcm92aWRlOiBBUFBfUk9PVF9WSUVXLCB1c2VGYWN0b3J5OiBnZW5lcmF0ZUZhbGxiYWNrUm9vdFZpZXcsIGRlcHM6IFtbbmV3IE9wdGlvbmFsKCksIG5ldyBTa2lwU2VsZigpLCBBUFBfUk9PVF9WSUVXXV0gfSxcbiAgeyBwcm92aWRlOiBJTkpFQ1RPUl9TQ09QRSwgdXNlVmFsdWU6ICdyb290JyB9LFxuICB7IHByb3ZpZGU6IEVycm9ySGFuZGxlciwgdXNlRmFjdG9yeTogZXJyb3JIYW5kbGVyLCBkZXBzOiBbXSB9LFxuICB7IHByb3ZpZGU6IFZpZXdVdGlsLCB1c2VDbGFzczogVmlld1V0aWwsIGRlcHM6IFtOQU1FU1BBQ0VfRklMVEVSUywgW25ldyBPcHRpb25hbCgpLCBFTkFCTEVfUkVVU0FCRV9WSUVXU11dIH0sXG4gIHtcbiAgICBwcm92aWRlOiBOYXRpdmVTY3JpcHRSZW5kZXJlckZhY3RvcnksXG4gICAgdXNlQ2xhc3M6IE5hdGl2ZVNjcmlwdFJlbmRlcmVyRmFjdG9yeSxcbiAgICBkZXBzOiBbQVBQX1JPT1RfVklFVywgTkFNRVNQQUNFX0ZJTFRFUlMsIE5BVElWRVNDUklQVF9ST09UX01PRFVMRV9JRCwgW25ldyBPcHRpb25hbCgpLCBFTkFCTEVfUkVVU0FCRV9WSUVXU11dLFxuICB9LFxuICB7IHByb3ZpZGU6IE5BVElWRVNDUklQVF9ST09UX01PRFVMRV9JRCwgdXNlRmFjdG9yeTogZ2VuZXJhdGVSYW5kb21JZCB9LFxuICB7IHByb3ZpZGU6IFJlbmRlcmVyRmFjdG9yeTIsIHVzZUV4aXN0aW5nOiBOYXRpdmVTY3JpcHRSZW5kZXJlckZhY3RvcnkgfSxcbiAgeyBwcm92aWRlOiBOQU1FU1BBQ0VfRklMVEVSUywgdXNlQ2xhc3M6IFBsYXRmb3JtTmFtZXNwYWNlRmlsdGVyLCBkZXBzOiBbREVWSUNFXSwgbXVsdGk6IHRydWUgfSxcbiAgeyBwcm92aWRlOiBERVZJQ0UsIHVzZVZhbHVlOiBEZXZpY2UgfSxcbiAgeyBwcm92aWRlOiBYaHJGYWN0b3J5LCB1c2VDbGFzczogTmF0aXZlc2NyaXB0WGhyRmFjdG9yeSwgZGVwczogW10gfSxcbl07XG5leHBvcnQgY29uc3QgTkFUSVZFU0NSSVBUX01PRFVMRV9QUk9WSURFUlM6IFByb3ZpZGVyW10gPSBbeyBwcm92aWRlOiBWaWV3cG9ydFNjcm9sbGVyLCB1c2VDbGFzczogTnVsbFZpZXdwb3J0U2Nyb2xsZXIgfV07XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtBcHBsaWNhdGlvbk1vZHVsZSwgRGV0YWNoZWRMb2FkZXIsIE5hdGl2ZVNjcmlwdENvbW1vbk1vZHVsZV0sXG4gIHByb3ZpZGVyczogWy4uLk5BVElWRVNDUklQVF9NT0RVTEVfU1RBVElDX1BST1ZJREVSUywgLi4uTkFUSVZFU0NSSVBUX01PRFVMRV9QUk9WSURFUlNdLFxuICBleHBvcnRzOiBbQXBwbGljYXRpb25Nb2R1bGUsIERldGFjaGVkTG9hZGVyLCBOYXRpdmVTY3JpcHRDb21tb25Nb2R1bGVdLFxuICBzY2hlbWFzOiBbTk9fRVJST1JTX1NDSEVNQV0sXG59KVxuZXhwb3J0IGNsYXNzIE5hdGl2ZVNjcmlwdE1vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIEBJbmplY3QoTmF0aXZlU2NyaXB0TW9kdWxlKSBwYXJlbnRNb2R1bGU6IE5hdGl2ZVNjcmlwdE1vZHVsZSB8IG51bGwpIHtcbiAgICBpZiAocGFyZW50TW9kdWxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5hdGl2ZVNjcmlwdE1vZHVsZSBoYXMgYWxyZWFkeSBiZWVuIGxvYWRlZC4gSWYgeW91IG5lZWQgYWNjZXNzIHRvIGNvbW1vbiBkaXJlY3RpdmVzIHN1Y2ggYXMgTmdJZiBhbmQgTmdGb3IgZnJvbSBhIGxhenkgbG9hZGVkIG1vZHVsZSwgaW1wb3J0IENvbW1vbk1vZHVsZSBpbnN0ZWFkLmApO1xuICAgIH1cbiAgfVxufVxuIl19