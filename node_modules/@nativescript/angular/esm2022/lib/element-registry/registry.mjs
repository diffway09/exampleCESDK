import { LayoutBase } from '@nativescript/core';
import { InvisibleNode } from '../views/invisible-nodes';
export const elementMap = new Map();
const camelCaseSplit = /([a-z0-9])([A-Z])/g;
const defaultViewMeta = { skipAddToDom: false };
export function registerElement(elementName, resolver, meta) {
    const entry = { resolver, meta };
    elementMap.set(elementName, entry);
    elementMap.set(elementName.toLowerCase(), entry);
    elementMap.set(elementName.replace(camelCaseSplit, '$1-$2').toLowerCase(), entry);
}
export function getViewClass(elementName) {
    const entry = elementMap.get(elementName) || elementMap.get(elementName.toLowerCase());
    if (!entry) {
        throw new TypeError(`No known component for element ${elementName}.`);
    }
    try {
        return entry.resolver();
    }
    catch (e) {
        throw new TypeError(`Could not load view for: ${elementName}.${e}`);
    }
}
export function getViewMeta(nodeName) {
    const entry = elementMap.get(nodeName) || elementMap.get(nodeName.toLowerCase());
    return (entry && entry.meta) || defaultViewMeta;
}
export function isKnownView(elementName) {
    return elementMap.has(elementName) || elementMap.has(elementName.toLowerCase());
}
export function extractSingleViewRecursive(nodes, nestLevel) {
    const actualNodes = nodes.filter((node) => !(node instanceof InvisibleNode));
    if (actualNodes.length === 0) {
        throw new Error(`No suitable views found in list template! ` + `Nesting level: ${nestLevel}`);
    }
    else if (actualNodes.length > 1) {
        throw new Error(`More than one view found in list template!` + `Nesting level: ${nestLevel}`);
    }
    const rootLayout = actualNodes[0];
    if (!rootLayout) {
        return extractSingleViewRecursive(rootLayout.children, nestLevel + 1);
    }
    const parentLayout = rootLayout.parent;
    if (parentLayout instanceof LayoutBase) {
        const node = rootLayout.parentNode;
        parentLayout.removeChild(rootLayout);
        rootLayout.parentNode = node;
    }
    return rootLayout;
}
/**
 * @deprecated getSingleViewRecursive is deprecated, use extractSingleViewRecursive
 */
export function getSingleViewRecursive(nodes, nestLevel) {
    return extractSingleViewRecursive(nodes, nestLevel);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hbmd1bGFyL3NyYy9saWIvZWxlbWVudC1yZWdpc3RyeS9yZWdpc3RyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFRLE1BQU0sb0JBQW9CLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBS3pELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxJQUFJLEdBQUcsRUFBNEQsQ0FBQztBQUM5RixNQUFNLGNBQWMsR0FBRyxvQkFBb0IsQ0FBQztBQUM1QyxNQUFNLGVBQWUsR0FBa0IsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFFL0QsTUFBTSxVQUFVLGVBQWUsQ0FBQyxXQUFtQixFQUFFLFFBQXNCLEVBQUUsSUFBb0I7SUFDL0YsTUFBTSxLQUFLLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDakMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbkMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakQsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNwRixDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxXQUFtQjtJQUM5QyxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDdkYsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ1gsTUFBTSxJQUFJLFNBQVMsQ0FBQyxrQ0FBa0MsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsSUFBSSxDQUFDO1FBQ0gsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCxNQUFNLElBQUksU0FBUyxDQUFDLDRCQUE0QixXQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0RSxDQUFDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUMsUUFBZ0I7SUFDMUMsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ2pGLE9BQU8sQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLGVBQWUsQ0FBQztBQUNsRCxDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxXQUFtQjtJQUM3QyxPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUNsRixDQUFDO0FBRUQsTUFBTSxVQUFVLDBCQUEwQixDQUFDLEtBQWlCLEVBQUUsU0FBaUI7SUFDN0UsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksWUFBWSxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBRTdFLElBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxHQUFHLGtCQUFrQixTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ2hHLENBQUM7U0FBTSxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FBQyw0Q0FBNEMsR0FBRyxrQkFBa0IsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUNoRyxDQUFDO0lBRUQsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNoQixPQUFPLDBCQUEwQixDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO0lBQ3ZDLElBQUksWUFBWSxZQUFZLFVBQVUsRUFBRSxDQUFDO1FBQ3ZDLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUM7UUFDbkMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyQyxVQUFVLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUMvQixDQUFDO0lBRUQsT0FBTyxVQUFVLENBQUM7QUFDcEIsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLHNCQUFzQixDQUFDLEtBQWlCLEVBQUUsU0FBaUI7SUFDekUsT0FBTywwQkFBMEIsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDdEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExheW91dEJhc2UsIFZpZXcgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuaW1wb3J0IHsgSW52aXNpYmxlTm9kZSB9IGZyb20gJy4uL3ZpZXdzL2ludmlzaWJsZS1ub2Rlcyc7XG5pbXBvcnQgeyBWaWV3Q2xhc3NNZXRhIH0gZnJvbSAnLi4vdmlld3Mvdmlldy10eXBlcyc7XG5cbmV4cG9ydCB0eXBlIFZpZXdSZXNvbHZlciA9ICgpID0+IGFueTtcblxuZXhwb3J0IGNvbnN0IGVsZW1lbnRNYXAgPSBuZXcgTWFwPHN0cmluZywgeyByZXNvbHZlcjogVmlld1Jlc29sdmVyOyBtZXRhPzogVmlld0NsYXNzTWV0YSB9PigpO1xuY29uc3QgY2FtZWxDYXNlU3BsaXQgPSAvKFthLXowLTldKShbQS1aXSkvZztcbmNvbnN0IGRlZmF1bHRWaWV3TWV0YTogVmlld0NsYXNzTWV0YSA9IHsgc2tpcEFkZFRvRG9tOiBmYWxzZSB9O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJFbGVtZW50KGVsZW1lbnROYW1lOiBzdHJpbmcsIHJlc29sdmVyOiBWaWV3UmVzb2x2ZXIsIG1ldGE/OiBWaWV3Q2xhc3NNZXRhKTogdm9pZCB7XG4gIGNvbnN0IGVudHJ5ID0geyByZXNvbHZlciwgbWV0YSB9O1xuICBlbGVtZW50TWFwLnNldChlbGVtZW50TmFtZSwgZW50cnkpO1xuICBlbGVtZW50TWFwLnNldChlbGVtZW50TmFtZS50b0xvd2VyQ2FzZSgpLCBlbnRyeSk7XG4gIGVsZW1lbnRNYXAuc2V0KGVsZW1lbnROYW1lLnJlcGxhY2UoY2FtZWxDYXNlU3BsaXQsICckMS0kMicpLnRvTG93ZXJDYXNlKCksIGVudHJ5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZpZXdDbGFzcyhlbGVtZW50TmFtZTogc3RyaW5nKTogYW55IHtcbiAgY29uc3QgZW50cnkgPSBlbGVtZW50TWFwLmdldChlbGVtZW50TmFtZSkgfHwgZWxlbWVudE1hcC5nZXQoZWxlbWVudE5hbWUudG9Mb3dlckNhc2UoKSk7XG4gIGlmICghZW50cnkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBrbm93biBjb21wb25lbnQgZm9yIGVsZW1lbnQgJHtlbGVtZW50TmFtZX0uYCk7XG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBlbnRyeS5yZXNvbHZlcigpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgQ291bGQgbm90IGxvYWQgdmlldyBmb3I6ICR7ZWxlbWVudE5hbWV9LiR7ZX1gKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Vmlld01ldGEobm9kZU5hbWU6IHN0cmluZyk6IFZpZXdDbGFzc01ldGEge1xuICBjb25zdCBlbnRyeSA9IGVsZW1lbnRNYXAuZ2V0KG5vZGVOYW1lKSB8fCBlbGVtZW50TWFwLmdldChub2RlTmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgcmV0dXJuIChlbnRyeSAmJiBlbnRyeS5tZXRhKSB8fCBkZWZhdWx0Vmlld01ldGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0tub3duVmlldyhlbGVtZW50TmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBlbGVtZW50TWFwLmhhcyhlbGVtZW50TmFtZSkgfHwgZWxlbWVudE1hcC5oYXMoZWxlbWVudE5hbWUudG9Mb3dlckNhc2UoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0U2luZ2xlVmlld1JlY3Vyc2l2ZShub2RlczogQXJyYXk8YW55PiwgbmVzdExldmVsOiBudW1iZXIpOiBWaWV3IHtcbiAgY29uc3QgYWN0dWFsTm9kZXMgPSBub2Rlcy5maWx0ZXIoKG5vZGUpID0+ICEobm9kZSBpbnN0YW5jZW9mIEludmlzaWJsZU5vZGUpKTtcblxuICBpZiAoYWN0dWFsTm9kZXMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBObyBzdWl0YWJsZSB2aWV3cyBmb3VuZCBpbiBsaXN0IHRlbXBsYXRlISBgICsgYE5lc3RpbmcgbGV2ZWw6ICR7bmVzdExldmVsfWApO1xuICB9IGVsc2UgaWYgKGFjdHVhbE5vZGVzLmxlbmd0aCA+IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE1vcmUgdGhhbiBvbmUgdmlldyBmb3VuZCBpbiBsaXN0IHRlbXBsYXRlIWAgKyBgTmVzdGluZyBsZXZlbDogJHtuZXN0TGV2ZWx9YCk7XG4gIH1cblxuICBjb25zdCByb290TGF5b3V0ID0gYWN0dWFsTm9kZXNbMF07XG4gIGlmICghcm9vdExheW91dCkge1xuICAgIHJldHVybiBleHRyYWN0U2luZ2xlVmlld1JlY3Vyc2l2ZShyb290TGF5b3V0LmNoaWxkcmVuLCBuZXN0TGV2ZWwgKyAxKTtcbiAgfVxuXG4gIGNvbnN0IHBhcmVudExheW91dCA9IHJvb3RMYXlvdXQucGFyZW50O1xuICBpZiAocGFyZW50TGF5b3V0IGluc3RhbmNlb2YgTGF5b3V0QmFzZSkge1xuICAgIGNvbnN0IG5vZGUgPSByb290TGF5b3V0LnBhcmVudE5vZGU7XG4gICAgcGFyZW50TGF5b3V0LnJlbW92ZUNoaWxkKHJvb3RMYXlvdXQpO1xuICAgIHJvb3RMYXlvdXQucGFyZW50Tm9kZSA9IG5vZGU7XG4gIH1cblxuICByZXR1cm4gcm9vdExheW91dDtcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBnZXRTaW5nbGVWaWV3UmVjdXJzaXZlIGlzIGRlcHJlY2F0ZWQsIHVzZSBleHRyYWN0U2luZ2xlVmlld1JlY3Vyc2l2ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2luZ2xlVmlld1JlY3Vyc2l2ZShub2RlczogQXJyYXk8YW55PiwgbmVzdExldmVsOiBudW1iZXIpOiBWaWV3IHtcbiAgcmV0dXJuIGV4dHJhY3RTaW5nbGVWaWV3UmVjdXJzaXZlKG5vZGVzLCBuZXN0TGV2ZWwpO1xufVxuIl19