import { FormattedString, Page, Span } from '@nativescript/core';
import { isInvisibleNode } from '../views/utils';
export const frameMeta = {
    insertChild: (parent, child) => {
        // Page cannot be added to Frame with _addChildFromBuilder (thwos "use defaultPage" error)
        if (isInvisibleNode(child)) {
            return;
        }
        else if (child instanceof Page) {
            parent.navigate({ create: () => child });
        }
        else {
            throw new Error('Only a Page can be a child of Frame');
        }
    },
};
export const formattedStringMeta = {
    insertChild(parent, child, next) {
        const index = parent.spans.indexOf(next);
        if (index > -1) {
            parent.spans.splice(index, 0, child);
        }
        else {
            parent.spans.push(child);
        }
    },
    removeChild(parent, child) {
        const index = parent.spans.indexOf(child);
        if (index > -1) {
            parent.spans.splice(index, 1);
        }
    },
};
export const textBaseMeta = {
    insertChild(parent, child, next) {
        if (child instanceof FormattedString) {
            parent.formattedText = child;
        }
        else if (child instanceof Span) {
            parent.formattedText ??= new FormattedString();
            formattedStringMeta.insertChild(parent.formattedText, child, next);
        }
    },
    removeChild(parent, child) {
        if (!parent.formattedText)
            return;
        if (child instanceof FormattedString) {
            if (parent.formattedText === child) {
                parent.formattedText = null;
            }
        }
        else if (child instanceof Span) {
            formattedStringMeta.removeChild(parent.formattedText, child);
        }
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hbmd1bGFyL3NyYy9saWIvZWxlbWVudC1yZWdpc3RyeS9tZXRhcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFTLElBQUksRUFBRSxJQUFJLEVBQVksTUFBTSxvQkFBb0IsQ0FBQztBQUNsRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHakQsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFrQjtJQUN0QyxXQUFXLEVBQUUsQ0FBQyxNQUFhLEVBQUUsS0FBYSxFQUFFLEVBQUU7UUFDNUMsMEZBQTBGO1FBQzFGLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDM0IsT0FBTztRQUNULENBQUM7YUFBTSxJQUFJLEtBQUssWUFBWSxJQUFJLEVBQUUsQ0FBQztZQUNqQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDM0MsQ0FBQzthQUFNLENBQUM7WUFDTixNQUFNLElBQUksS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7UUFDekQsQ0FBQztJQUNILENBQUM7Q0FDRixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQWtCO0lBQ2hELFdBQVcsQ0FBQyxNQUF1QixFQUFFLEtBQVcsRUFBRSxJQUFVO1FBQzFELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDZixNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLENBQUM7YUFBTSxDQUFDO1lBQ04sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0IsQ0FBQztJQUNILENBQUM7SUFDRCxXQUFXLENBQUMsTUFBdUIsRUFBRSxLQUFXO1FBQzlDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDZixNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDaEMsQ0FBQztJQUNILENBQUM7Q0FDRixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFrQjtJQUN6QyxXQUFXLENBQUMsTUFBZ0IsRUFBRSxLQUFLLEVBQUUsSUFBSTtRQUN2QyxJQUFJLEtBQUssWUFBWSxlQUFlLEVBQUUsQ0FBQztZQUNyQyxNQUFNLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMvQixDQUFDO2FBQU0sSUFBSSxLQUFLLFlBQVksSUFBSSxFQUFFLENBQUM7WUFDakMsTUFBTSxDQUFDLGFBQWEsS0FBSyxJQUFJLGVBQWUsRUFBRSxDQUFDO1lBQy9DLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNyRSxDQUFDO0lBQ0gsQ0FBQztJQUNELFdBQVcsQ0FBQyxNQUFnQixFQUFFLEtBQWE7UUFDekMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhO1lBQUUsT0FBTztRQUNsQyxJQUFJLEtBQUssWUFBWSxlQUFlLEVBQUUsQ0FBQztZQUNyQyxJQUFJLE1BQU0sQ0FBQyxhQUFhLEtBQUssS0FBSyxFQUFFLENBQUM7Z0JBQ25DLE1BQU0sQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1lBQzlCLENBQUM7UUFDSCxDQUFDO2FBQU0sSUFBSSxLQUFLLFlBQVksSUFBSSxFQUFFLENBQUM7WUFDakMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0QsQ0FBQztJQUNILENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybWF0dGVkU3RyaW5nLCBGcmFtZSwgUGFnZSwgU3BhbiwgVGV4dEJhc2UgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuaW1wb3J0IHsgaXNJbnZpc2libGVOb2RlIH0gZnJvbSAnLi4vdmlld3MvdXRpbHMnO1xuaW1wb3J0IHsgTmdWaWV3LCBWaWV3Q2xhc3NNZXRhIH0gZnJvbSAnLi4vdmlld3Mvdmlldy10eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBmcmFtZU1ldGE6IFZpZXdDbGFzc01ldGEgPSB7XG4gIGluc2VydENoaWxkOiAocGFyZW50OiBGcmFtZSwgY2hpbGQ6IE5nVmlldykgPT4ge1xuICAgIC8vIFBhZ2UgY2Fubm90IGJlIGFkZGVkIHRvIEZyYW1lIHdpdGggX2FkZENoaWxkRnJvbUJ1aWxkZXIgKHRod29zIFwidXNlIGRlZmF1bHRQYWdlXCIgZXJyb3IpXG4gICAgaWYgKGlzSW52aXNpYmxlTm9kZShjaGlsZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKGNoaWxkIGluc3RhbmNlb2YgUGFnZSkge1xuICAgICAgcGFyZW50Lm5hdmlnYXRlKHsgY3JlYXRlOiAoKSA9PiBjaGlsZCB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPbmx5IGEgUGFnZSBjYW4gYmUgYSBjaGlsZCBvZiBGcmFtZScpO1xuICAgIH1cbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBmb3JtYXR0ZWRTdHJpbmdNZXRhOiBWaWV3Q2xhc3NNZXRhID0ge1xuICBpbnNlcnRDaGlsZChwYXJlbnQ6IEZvcm1hdHRlZFN0cmluZywgY2hpbGQ6IFNwYW4sIG5leHQ6IFNwYW4pIHtcbiAgICBjb25zdCBpbmRleCA9IHBhcmVudC5zcGFucy5pbmRleE9mKG5leHQpO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICBwYXJlbnQuc3BhbnMuc3BsaWNlKGluZGV4LCAwLCBjaGlsZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudC5zcGFucy5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH0sXG4gIHJlbW92ZUNoaWxkKHBhcmVudDogRm9ybWF0dGVkU3RyaW5nLCBjaGlsZDogU3Bhbikge1xuICAgIGNvbnN0IGluZGV4ID0gcGFyZW50LnNwYW5zLmluZGV4T2YoY2hpbGQpO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICBwYXJlbnQuc3BhbnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgdGV4dEJhc2VNZXRhOiBWaWV3Q2xhc3NNZXRhID0ge1xuICBpbnNlcnRDaGlsZChwYXJlbnQ6IFRleHRCYXNlLCBjaGlsZCwgbmV4dCkge1xuICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIEZvcm1hdHRlZFN0cmluZykge1xuICAgICAgcGFyZW50LmZvcm1hdHRlZFRleHQgPSBjaGlsZDtcbiAgICB9IGVsc2UgaWYgKGNoaWxkIGluc3RhbmNlb2YgU3Bhbikge1xuICAgICAgcGFyZW50LmZvcm1hdHRlZFRleHQgPz89IG5ldyBGb3JtYXR0ZWRTdHJpbmcoKTtcbiAgICAgIGZvcm1hdHRlZFN0cmluZ01ldGEuaW5zZXJ0Q2hpbGQocGFyZW50LmZvcm1hdHRlZFRleHQsIGNoaWxkLCBuZXh0KTtcbiAgICB9XG4gIH0sXG4gIHJlbW92ZUNoaWxkKHBhcmVudDogVGV4dEJhc2UsIGNoaWxkOiBOZ1ZpZXcpIHtcbiAgICBpZiAoIXBhcmVudC5mb3JtYXR0ZWRUZXh0KSByZXR1cm47XG4gICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgRm9ybWF0dGVkU3RyaW5nKSB7XG4gICAgICBpZiAocGFyZW50LmZvcm1hdHRlZFRleHQgPT09IGNoaWxkKSB7XG4gICAgICAgIHBhcmVudC5mb3JtYXR0ZWRUZXh0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNoaWxkIGluc3RhbmNlb2YgU3Bhbikge1xuICAgICAgZm9ybWF0dGVkU3RyaW5nTWV0YS5yZW1vdmVDaGlsZChwYXJlbnQuZm9ybWF0dGVkVGV4dCwgY2hpbGQpO1xuICAgIH1cbiAgfSxcbn07XG4iXX0=