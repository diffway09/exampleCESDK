import { Directive, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BaseValueAccessor } from './base-value-accessor';
import * as i0 from "@angular/core";
const SELECTED_INDEX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => SelectedIndexValueAccessor),
    multi: true,
};
/**
 * The accessor for setting a selectedIndex and listening to changes that is used by the
 * {@link NgModel} directives.
 *
 *  ### Example
 *  ```
 *  <SegmentedBar [(ngModel)]="model.test">
 *  ```
 */
export class SelectedIndexValueAccessor extends BaseValueAccessor {
    // tslint:disable-line:max-line-length directive-class-suffix
    constructor(elementRef) {
        super(elementRef.nativeElement);
    }
    writeValue(value) {
        const normalized = super.normalizeValue(value);
        this.value = normalized;
        if (this.viewInitialized) {
            this.view.selectedIndex = this.value;
        }
    }
    ngAfterViewInit() {
        this.viewInitialized = true;
        this.view.selectedIndex = this.value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: SelectedIndexValueAccessor, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: SelectedIndexValueAccessor, selector: "SegmentedBar[ngModel],SegmentedBar[formControlName],SegmentedBar[formControl],segmentedBar[ngModel],segmentedBar[formControlName],segmentedBar[formControl],segmentedbar[ngModel],segmentedbar[formControlName],segmentedbar[formControl],segmented-bar[ngModel],segmented-bar[formControlName],segmented-bar[formControl],ListPicker[ngModel],ListPicker[formControlName],ListPicker[formControl],listPicker[ngModel],listPicker[formControlName],listPicker[formControl],listpicker[ngModel],listpicker[formControlName],listpicker[formControl],list-picker[ngModel],list-picker[formControlName],list-picker[formControl],TabView[ngModel],TabView[formControlName],TabView[formControl],tabView[ngModel],tabView[formControlName],tabView[formControl],tabview[ngModel],tabview[formControlName],tabview[formControl],tab-view[ngModel],tab-view[formControlName],tab-view[formControl]", host: { listeners: { "selectedIndexChange": "onChange($event.value)" } }, providers: [SELECTED_INDEX_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: SelectedIndexValueAccessor, decorators: [{
            type: Directive,
            args: [{
                    selector: 'SegmentedBar[ngModel],SegmentedBar[formControlName],SegmentedBar[formControl],' +
                        'segmentedBar[ngModel],segmentedBar[formControlName],segmentedBar[formControl],' +
                        'segmentedbar[ngModel],segmentedbar[formControlName],segmentedbar[formControl],' +
                        'segmented-bar[ngModel],segmented-bar[formControlName],segmented-bar[formControl],' +
                        'ListPicker[ngModel],ListPicker[formControlName],ListPicker[formControl],' +
                        'listPicker[ngModel],listPicker[formControlName],listPicker[formControl],' +
                        'listpicker[ngModel],listpicker[formControlName],listpicker[formControl],' +
                        'list-picker[ngModel],list-picker[formControlName],list-picker[formControl],' +
                        'TabView[ngModel],TabView[formControlName],TabView[formControl],' +
                        'tabView[ngModel],tabView[formControlName],tabView[formControl],' +
                        'tabview[ngModel],tabview[formControlName],tabview[formControl],' +
                        'tab-view[ngModel],tab-view[formControlName],tab-view[formControl]',
                    providers: [SELECTED_INDEX_VALUE_ACCESSOR],
                    // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                    host: {
                        '(selectedIndexChange)': 'onChange($event.value)',
                    },
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0ZWRJbmRleC12YWx1ZS1hY2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FuZ3VsYXIvc3JjL2xpYi9mb3Jtcy92YWx1ZS1hY2Nlc3NvcnMvc2VsZWN0ZWRJbmRleC12YWx1ZS1hY2Nlc3Nvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDOztBQUUxRCxNQUFNLDZCQUE2QixHQUFHO0lBQ3BDLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztJQUN6RCxLQUFLLEVBQUUsSUFBSTtDQUNaLENBQUM7QUFJRjs7Ozs7Ozs7R0FRRztBQXFCSCxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsaUJBQWlDO0lBQy9FLDZEQUE2RDtJQUM3RCxZQUFZLFVBQXNCO1FBQ2hDLEtBQUssQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUtELFVBQVUsQ0FBQyxLQUFVO1FBQ25CLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUM7UUFFeEIsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN2QyxDQUFDO0lBQ0gsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3ZDLENBQUM7OEdBckJVLDBCQUEwQjtrR0FBMUIsMEJBQTBCLGk4QkFOMUIsQ0FBQyw2QkFBNkIsQ0FBQzs7MkZBTS9CLDBCQUEwQjtrQkFwQnRDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUNOLGdGQUFnRjt3QkFDaEYsZ0ZBQWdGO3dCQUNoRixnRkFBZ0Y7d0JBQ2hGLG1GQUFtRjt3QkFDbkYsMEVBQTBFO3dCQUMxRSwwRUFBMEU7d0JBQzFFLDBFQUEwRTt3QkFDMUUsNkVBQTZFO3dCQUM3RSxpRUFBaUU7d0JBQ2pFLGlFQUFpRTt3QkFDakUsaUVBQWlFO3dCQUNqRSxtRUFBbUU7b0JBQ3JFLFNBQVMsRUFBRSxDQUFDLDZCQUE2QixDQUFDO29CQUMxQyxxRUFBcUU7b0JBQ3JFLElBQUksRUFBRTt3QkFDSix1QkFBdUIsRUFBRSx3QkFBd0I7cUJBQ2xEO2lCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBmb3J3YXJkUmVmLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFZpZXcgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuaW1wb3J0IHsgQmFzZVZhbHVlQWNjZXNzb3IgfSBmcm9tICcuL2Jhc2UtdmFsdWUtYWNjZXNzb3InO1xuXG5jb25zdCBTRUxFQ1RFRF9JTkRFWF9WQUxVRV9BQ0NFU1NPUiA9IHtcbiAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFNlbGVjdGVkSW5kZXhWYWx1ZUFjY2Vzc29yKSxcbiAgbXVsdGk6IHRydWUsXG59O1xuXG5leHBvcnQgdHlwZSBTZWxlY3RhYmxlVmlldyA9IHsgc2VsZWN0ZWRJbmRleDogbnVtYmVyIH0gJiBWaWV3O1xuXG4vKipcbiAqIFRoZSBhY2Nlc3NvciBmb3Igc2V0dGluZyBhIHNlbGVjdGVkSW5kZXggYW5kIGxpc3RlbmluZyB0byBjaGFuZ2VzIHRoYXQgaXMgdXNlZCBieSB0aGVcbiAqIHtAbGluayBOZ01vZGVsfSBkaXJlY3RpdmVzLlxuICpcbiAqICAjIyMgRXhhbXBsZVxuICogIGBgYFxuICogIDxTZWdtZW50ZWRCYXIgWyhuZ01vZGVsKV09XCJtb2RlbC50ZXN0XCI+XG4gKiAgYGBgXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjpcbiAgICAnU2VnbWVudGVkQmFyW25nTW9kZWxdLFNlZ21lbnRlZEJhcltmb3JtQ29udHJvbE5hbWVdLFNlZ21lbnRlZEJhcltmb3JtQ29udHJvbF0sJyArXG4gICAgJ3NlZ21lbnRlZEJhcltuZ01vZGVsXSxzZWdtZW50ZWRCYXJbZm9ybUNvbnRyb2xOYW1lXSxzZWdtZW50ZWRCYXJbZm9ybUNvbnRyb2xdLCcgK1xuICAgICdzZWdtZW50ZWRiYXJbbmdNb2RlbF0sc2VnbWVudGVkYmFyW2Zvcm1Db250cm9sTmFtZV0sc2VnbWVudGVkYmFyW2Zvcm1Db250cm9sXSwnICtcbiAgICAnc2VnbWVudGVkLWJhcltuZ01vZGVsXSxzZWdtZW50ZWQtYmFyW2Zvcm1Db250cm9sTmFtZV0sc2VnbWVudGVkLWJhcltmb3JtQ29udHJvbF0sJyArXG4gICAgJ0xpc3RQaWNrZXJbbmdNb2RlbF0sTGlzdFBpY2tlcltmb3JtQ29udHJvbE5hbWVdLExpc3RQaWNrZXJbZm9ybUNvbnRyb2xdLCcgK1xuICAgICdsaXN0UGlja2VyW25nTW9kZWxdLGxpc3RQaWNrZXJbZm9ybUNvbnRyb2xOYW1lXSxsaXN0UGlja2VyW2Zvcm1Db250cm9sXSwnICtcbiAgICAnbGlzdHBpY2tlcltuZ01vZGVsXSxsaXN0cGlja2VyW2Zvcm1Db250cm9sTmFtZV0sbGlzdHBpY2tlcltmb3JtQ29udHJvbF0sJyArXG4gICAgJ2xpc3QtcGlja2VyW25nTW9kZWxdLGxpc3QtcGlja2VyW2Zvcm1Db250cm9sTmFtZV0sbGlzdC1waWNrZXJbZm9ybUNvbnRyb2xdLCcgK1xuICAgICdUYWJWaWV3W25nTW9kZWxdLFRhYlZpZXdbZm9ybUNvbnRyb2xOYW1lXSxUYWJWaWV3W2Zvcm1Db250cm9sXSwnICtcbiAgICAndGFiVmlld1tuZ01vZGVsXSx0YWJWaWV3W2Zvcm1Db250cm9sTmFtZV0sdGFiVmlld1tmb3JtQ29udHJvbF0sJyArXG4gICAgJ3RhYnZpZXdbbmdNb2RlbF0sdGFidmlld1tmb3JtQ29udHJvbE5hbWVdLHRhYnZpZXdbZm9ybUNvbnRyb2xdLCcgK1xuICAgICd0YWItdmlld1tuZ01vZGVsXSx0YWItdmlld1tmb3JtQ29udHJvbE5hbWVdLHRhYi12aWV3W2Zvcm1Db250cm9sXScsXG4gIHByb3ZpZGVyczogW1NFTEVDVEVEX0lOREVYX1ZBTFVFX0FDQ0VTU09SXSxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9uby1ob3N0LW1ldGFkYXRhLXByb3BlcnR5XG4gIGhvc3Q6IHtcbiAgICAnKHNlbGVjdGVkSW5kZXhDaGFuZ2UpJzogJ29uQ2hhbmdlKCRldmVudC52YWx1ZSknLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBTZWxlY3RlZEluZGV4VmFsdWVBY2Nlc3NvciBleHRlbmRzIEJhc2VWYWx1ZUFjY2Vzc29yPFNlbGVjdGFibGVWaWV3PiBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm1heC1saW5lLWxlbmd0aCBkaXJlY3RpdmUtY2xhc3Mtc3VmZml4XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcbiAgICBzdXBlcihlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICB9XG5cbiAgcHJpdmF0ZSB2YWx1ZTogbnVtYmVyO1xuICBwcml2YXRlIHZpZXdJbml0aWFsaXplZDogYm9vbGVhbjtcblxuICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCBub3JtYWxpemVkID0gc3VwZXIubm9ybWFsaXplVmFsdWUodmFsdWUpO1xuICAgIHRoaXMudmFsdWUgPSBub3JtYWxpemVkO1xuXG4gICAgaWYgKHRoaXMudmlld0luaXRpYWxpemVkKSB7XG4gICAgICB0aGlzLnZpZXcuc2VsZWN0ZWRJbmRleCA9IHRoaXMudmFsdWU7XG4gICAgfVxuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMudmlld0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB0aGlzLnZpZXcuc2VsZWN0ZWRJbmRleCA9IHRoaXMudmFsdWU7XG4gIH1cbn1cbiJdfQ==