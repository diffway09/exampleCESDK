import { Directive, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BaseValueAccessor } from './base-value-accessor';
import * as i0 from "@angular/core";
const TEXT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => TextValueAccessor),
    multi: true,
};
/**
 * The accessor for writing a text and listening to changes that is used by the
 * {@link NgModel} directives.
 *
 *  ### Example
 *  ```
 *  <TextField [(ngModel)]="model.test">
 *  ```
 */
export class TextValueAccessor extends BaseValueAccessor {
    // tslint:disable-line:directive-class-suffix
    constructor(elementRef) {
        super(elementRef.nativeElement);
    }
    writeValue(value) {
        const normalized = super.normalizeValue(value ? `${value}` : value);
        this.view.text = normalized;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: TextValueAccessor, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: TextValueAccessor, selector: "TextField[ngModel],TextField[formControlName],TextField[formControl],textField[ngModel],textField[formControlName],textField[formControl],textfield[ngModel],textfield[formControlName],textfield[formControl],text-field[ngModel],text-field[formControlName],text-field[formControl],TextView[ngModel],TextView[formControlName],TextView[formControl],textView[ngModel],textView[formControlName],textView[formControl],textview[ngModel],textview[formControlName],textview[formControl],text-view[ngModel],text-view[formControlName],text-view[formControl],SearchBar[ngModel],SearchBar[formControlName],SearchBar[formControl],searchBar[ngModel],searchBar[formControlName],searchBar[formControl],searchbar[ngModel],searchbar[formControlName],searchbar[formControl],search-bar[ngModel], search-bar[formControlName],search-bar[formControl]", host: { listeners: { "blur": "onTouched()", "textChange": "onChange($event.value)" } }, providers: [TEXT_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: TextValueAccessor, decorators: [{
            type: Directive,
            args: [{
                    selector: 'TextField[ngModel],TextField[formControlName],TextField[formControl],' +
                        'textField[ngModel],textField[formControlName],textField[formControl],' +
                        'textfield[ngModel],textfield[formControlName],textfield[formControl],' +
                        'text-field[ngModel],text-field[formControlName],text-field[formControl],' +
                        'TextView[ngModel],TextView[formControlName],TextView[formControl],' +
                        'textView[ngModel],textView[formControlName],textView[formControl],' +
                        'textview[ngModel],textview[formControlName],textview[formControl],' +
                        'text-view[ngModel],text-view[formControlName],text-view[formControl],' +
                        'SearchBar[ngModel],SearchBar[formControlName],SearchBar[formControl],' +
                        'searchBar[ngModel],searchBar[formControlName],searchBar[formControl],' +
                        'searchbar[ngModel],searchbar[formControlName],searchbar[formControl],' +
                        'search-bar[ngModel], search-bar[formControlName],search-bar[formControl]',
                    providers: [TEXT_VALUE_ACCESSOR],
                    // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                    host: {
                        '(blur)': 'onTouched()',
                        '(textChange)': 'onChange($event.value)',
                    },
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC12YWx1ZS1hY2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FuZ3VsYXIvc3JjL2xpYi9mb3Jtcy92YWx1ZS1hY2Nlc3NvcnMvdGV4dC12YWx1ZS1hY2Nlc3Nvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0FBRTFELE1BQU0sbUJBQW1CLEdBQUc7SUFDMUIsT0FBTyxFQUFFLGlCQUFpQjtJQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDO0lBQ2hELEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQztBQUlGOzs7Ozs7OztHQVFHO0FBc0JILE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxpQkFBMkI7SUFDaEUsNkNBQTZDO0lBQzdDLFlBQVksVUFBc0I7UUFDaEMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQVU7UUFDbkIsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztJQUM5QixDQUFDOzhHQVRVLGlCQUFpQjtrR0FBakIsaUJBQWlCLDQ2QkFQakIsQ0FBQyxtQkFBbUIsQ0FBQzs7MkZBT3JCLGlCQUFpQjtrQkFyQjdCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUNOLHVFQUF1RTt3QkFDdkUsdUVBQXVFO3dCQUN2RSx1RUFBdUU7d0JBQ3ZFLDBFQUEwRTt3QkFDMUUsb0VBQW9FO3dCQUNwRSxvRUFBb0U7d0JBQ3BFLG9FQUFvRTt3QkFDcEUsdUVBQXVFO3dCQUN2RSx1RUFBdUU7d0JBQ3ZFLHVFQUF1RTt3QkFDdkUsdUVBQXVFO3dCQUN2RSwwRUFBMEU7b0JBQzVFLFNBQVMsRUFBRSxDQUFDLG1CQUFtQixDQUFDO29CQUNoQyxxRUFBcUU7b0JBQ3JFLElBQUksRUFBRTt3QkFDSixRQUFRLEVBQUUsYUFBYTt3QkFDdkIsY0FBYyxFQUFFLHdCQUF3QjtxQkFDekM7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIGZvcndhcmRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZSc7XG5pbXBvcnQgeyBCYXNlVmFsdWVBY2Nlc3NvciB9IGZyb20gJy4vYmFzZS12YWx1ZS1hY2Nlc3Nvcic7XG5cbmNvbnN0IFRFWFRfVkFMVUVfQUNDRVNTT1IgPSB7XG4gIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUZXh0VmFsdWVBY2Nlc3NvciksXG4gIG11bHRpOiB0cnVlLFxufTtcblxuZXhwb3J0IHR5cGUgVGV4dFZpZXcgPSB7IHRleHQ6IHN0cmluZyB9ICYgVmlldztcblxuLyoqXG4gKiBUaGUgYWNjZXNzb3IgZm9yIHdyaXRpbmcgYSB0ZXh0IGFuZCBsaXN0ZW5pbmcgdG8gY2hhbmdlcyB0aGF0IGlzIHVzZWQgYnkgdGhlXG4gKiB7QGxpbmsgTmdNb2RlbH0gZGlyZWN0aXZlcy5cbiAqXG4gKiAgIyMjIEV4YW1wbGVcbiAqICBgYGBcbiAqICA8VGV4dEZpZWxkIFsobmdNb2RlbCldPVwibW9kZWwudGVzdFwiPlxuICogIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6XG4gICAgJ1RleHRGaWVsZFtuZ01vZGVsXSxUZXh0RmllbGRbZm9ybUNvbnRyb2xOYW1lXSxUZXh0RmllbGRbZm9ybUNvbnRyb2xdLCcgK1xuICAgICd0ZXh0RmllbGRbbmdNb2RlbF0sdGV4dEZpZWxkW2Zvcm1Db250cm9sTmFtZV0sdGV4dEZpZWxkW2Zvcm1Db250cm9sXSwnICtcbiAgICAndGV4dGZpZWxkW25nTW9kZWxdLHRleHRmaWVsZFtmb3JtQ29udHJvbE5hbWVdLHRleHRmaWVsZFtmb3JtQ29udHJvbF0sJyArXG4gICAgJ3RleHQtZmllbGRbbmdNb2RlbF0sdGV4dC1maWVsZFtmb3JtQ29udHJvbE5hbWVdLHRleHQtZmllbGRbZm9ybUNvbnRyb2xdLCcgK1xuICAgICdUZXh0Vmlld1tuZ01vZGVsXSxUZXh0Vmlld1tmb3JtQ29udHJvbE5hbWVdLFRleHRWaWV3W2Zvcm1Db250cm9sXSwnICtcbiAgICAndGV4dFZpZXdbbmdNb2RlbF0sdGV4dFZpZXdbZm9ybUNvbnRyb2xOYW1lXSx0ZXh0Vmlld1tmb3JtQ29udHJvbF0sJyArXG4gICAgJ3RleHR2aWV3W25nTW9kZWxdLHRleHR2aWV3W2Zvcm1Db250cm9sTmFtZV0sdGV4dHZpZXdbZm9ybUNvbnRyb2xdLCcgK1xuICAgICd0ZXh0LXZpZXdbbmdNb2RlbF0sdGV4dC12aWV3W2Zvcm1Db250cm9sTmFtZV0sdGV4dC12aWV3W2Zvcm1Db250cm9sXSwnICtcbiAgICAnU2VhcmNoQmFyW25nTW9kZWxdLFNlYXJjaEJhcltmb3JtQ29udHJvbE5hbWVdLFNlYXJjaEJhcltmb3JtQ29udHJvbF0sJyArXG4gICAgJ3NlYXJjaEJhcltuZ01vZGVsXSxzZWFyY2hCYXJbZm9ybUNvbnRyb2xOYW1lXSxzZWFyY2hCYXJbZm9ybUNvbnRyb2xdLCcgK1xuICAgICdzZWFyY2hiYXJbbmdNb2RlbF0sc2VhcmNoYmFyW2Zvcm1Db250cm9sTmFtZV0sc2VhcmNoYmFyW2Zvcm1Db250cm9sXSwnICtcbiAgICAnc2VhcmNoLWJhcltuZ01vZGVsXSwgc2VhcmNoLWJhcltmb3JtQ29udHJvbE5hbWVdLHNlYXJjaC1iYXJbZm9ybUNvbnRyb2xdJyxcbiAgcHJvdmlkZXJzOiBbVEVYVF9WQUxVRV9BQ0NFU1NPUl0sXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvbm8taG9zdC1tZXRhZGF0YS1wcm9wZXJ0eVxuICBob3N0OiB7XG4gICAgJyhibHVyKSc6ICdvblRvdWNoZWQoKScsXG4gICAgJyh0ZXh0Q2hhbmdlKSc6ICdvbkNoYW5nZSgkZXZlbnQudmFsdWUpJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVGV4dFZhbHVlQWNjZXNzb3IgZXh0ZW5kcyBCYXNlVmFsdWVBY2Nlc3NvcjxUZXh0Vmlldz4ge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOmRpcmVjdGl2ZS1jbGFzcy1zdWZmaXhcbiAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgIHN1cGVyKGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG4gIH1cblxuICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCBub3JtYWxpemVkID0gc3VwZXIubm9ybWFsaXplVmFsdWUodmFsdWUgPyBgJHt2YWx1ZX1gIDogdmFsdWUpO1xuICAgIHRoaXMudmlldy50ZXh0ID0gbm9ybWFsaXplZDtcbiAgfVxufVxuIl19