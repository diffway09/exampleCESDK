import { NgModule } from '@angular/core';
import { TestComponentRenderer } from '@angular/core/testing';
import { COMMON_PROVIDERS, APP_ROOT_VIEW, NativeScriptModule } from '@nativescript/angular';
import { NativeScriptTestComponentRenderer } from './nativescript_test_component_renderer';
import { testingRootView } from './test-root-view';
import * as i0 from "@angular/core";
if (typeof Node === 'undefined' && !global.Node) {
    class DummyNode {
    }
    global.Node = DummyNode;
}
/**
 * Providers array is exported for cases where a custom module has to be constructed
 * to test a particular piece of code. This can happen, for example, if you are trying
 * to test dynamic component loading and need to specify an entryComponent for the testing
 * module.
 */
export const NATIVESCRIPT_TESTING_PROVIDERS = [...COMMON_PROVIDERS, { provide: APP_ROOT_VIEW, useFactory: testingRootView }, { provide: TestComponentRenderer, useClass: NativeScriptTestComponentRenderer }];
/**
 * NativeScript testing support module. Enables use of TestBed for angular components, directives,
 * pipes, and services.
 */
export class NativeScriptTestingModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NativeScriptTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.1.0", ngImport: i0, type: NativeScriptTestingModule, exports: [NativeScriptModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NativeScriptTestingModule, providers: NATIVESCRIPT_TESTING_PROVIDERS, imports: [NativeScriptModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NativeScriptTestingModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [NativeScriptModule],
                    providers: NATIVESCRIPT_TESTING_PROVIDERS,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlc2NyaXB0LXRlc3RpbmcubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci90ZXN0aW5nL3NyYy9saWIvbmF0aXZlc2NyaXB0LXRlc3RpbmcubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQVksTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzVGLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzNGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFbkQsSUFBSSxPQUFPLElBQUksS0FBSyxXQUFXLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEQsTUFBTSxTQUFTO0tBQUc7SUFDbEIsTUFBTSxDQUFDLElBQUksR0FBRyxTQUFnQixDQUFDO0FBQ2pDLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFlLENBQUMsR0FBRyxnQkFBZ0IsRUFBRSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLFFBQVEsRUFBRSxpQ0FBaUMsRUFBRSxDQUFDLENBQUM7QUFFMU47OztHQUdHO0FBS0gsTUFBTSxPQUFPLHlCQUF5Qjs4R0FBekIseUJBQXlCOytHQUF6Qix5QkFBeUIsWUFIMUIsa0JBQWtCOytHQUdqQix5QkFBeUIsYUFGekIsOEJBQThCLFlBRC9CLGtCQUFrQjs7MkZBR2pCLHlCQUF5QjtrQkFKckMsUUFBUTttQkFBQztvQkFDUixPQUFPLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztvQkFDN0IsU0FBUyxFQUFFLDhCQUE4QjtpQkFDMUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRlc3RDb21wb25lbnRSZW5kZXJlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBDT01NT05fUFJPVklERVJTLCBBUFBfUk9PVF9WSUVXLCBOYXRpdmVTY3JpcHRNb2R1bGUgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2FuZ3VsYXInO1xuaW1wb3J0IHsgTmF0aXZlU2NyaXB0VGVzdENvbXBvbmVudFJlbmRlcmVyIH0gZnJvbSAnLi9uYXRpdmVzY3JpcHRfdGVzdF9jb21wb25lbnRfcmVuZGVyZXInO1xuaW1wb3J0IHsgdGVzdGluZ1Jvb3RWaWV3IH0gZnJvbSAnLi90ZXN0LXJvb3Qtdmlldyc7XG5cbmlmICh0eXBlb2YgTm9kZSA9PT0gJ3VuZGVmaW5lZCcgJiYgIWdsb2JhbC5Ob2RlKSB7XG4gIGNsYXNzIER1bW15Tm9kZSB7fVxuICBnbG9iYWwuTm9kZSA9IER1bW15Tm9kZSBhcyBhbnk7XG59XG5cbi8qKlxuICogUHJvdmlkZXJzIGFycmF5IGlzIGV4cG9ydGVkIGZvciBjYXNlcyB3aGVyZSBhIGN1c3RvbSBtb2R1bGUgaGFzIHRvIGJlIGNvbnN0cnVjdGVkXG4gKiB0byB0ZXN0IGEgcGFydGljdWxhciBwaWVjZSBvZiBjb2RlLiBUaGlzIGNhbiBoYXBwZW4sIGZvciBleGFtcGxlLCBpZiB5b3UgYXJlIHRyeWluZ1xuICogdG8gdGVzdCBkeW5hbWljIGNvbXBvbmVudCBsb2FkaW5nIGFuZCBuZWVkIHRvIHNwZWNpZnkgYW4gZW50cnlDb21wb25lbnQgZm9yIHRoZSB0ZXN0aW5nXG4gKiBtb2R1bGUuXG4gKi9cbmV4cG9ydCBjb25zdCBOQVRJVkVTQ1JJUFRfVEVTVElOR19QUk9WSURFUlM6IFByb3ZpZGVyW10gPSBbLi4uQ09NTU9OX1BST1ZJREVSUywgeyBwcm92aWRlOiBBUFBfUk9PVF9WSUVXLCB1c2VGYWN0b3J5OiB0ZXN0aW5nUm9vdFZpZXcgfSwgeyBwcm92aWRlOiBUZXN0Q29tcG9uZW50UmVuZGVyZXIsIHVzZUNsYXNzOiBOYXRpdmVTY3JpcHRUZXN0Q29tcG9uZW50UmVuZGVyZXIgfV07XG5cbi8qKlxuICogTmF0aXZlU2NyaXB0IHRlc3Rpbmcgc3VwcG9ydCBtb2R1bGUuIEVuYWJsZXMgdXNlIG9mIFRlc3RCZWQgZm9yIGFuZ3VsYXIgY29tcG9uZW50cywgZGlyZWN0aXZlcyxcbiAqIHBpcGVzLCBhbmQgc2VydmljZXMuXG4gKi9cbkBOZ01vZHVsZSh7XG4gIGV4cG9ydHM6IFtOYXRpdmVTY3JpcHRNb2R1bGVdLFxuICBwcm92aWRlcnM6IE5BVElWRVNDUklQVF9URVNUSU5HX1BST1ZJREVSUyxcbn0pXG5leHBvcnQgY2xhc3MgTmF0aXZlU2NyaXB0VGVzdGluZ01vZHVsZSB7fVxuIl19