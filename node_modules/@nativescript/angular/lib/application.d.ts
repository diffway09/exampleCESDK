import { ApplicationRef, EnvironmentProviders, NgModuleRef, PlatformRef, Provider, Type } from '@angular/core';
import { LayoutBase } from '@nativescript/core';
import { Observable, Subject } from 'rxjs';
export interface AppLaunchView extends LayoutBase {
    startAnimation?: () => void;
    cleanup?: () => Promise<any>;
    __disable_root_view_handling?: boolean;
}
export declare function disableRootViewHanding(view: AppLaunchView): void;
export type NgModuleReason = 'hotreload' | 'applaunch' | 'appexit';
export type NgModuleEvent = {
    moduleType: 'main' | 'loading' | string;
    reference: NgModuleRef<unknown> | ApplicationRef;
    reason: NgModuleReason | string;
} | {
    moduleType: 'platform';
    reference: PlatformRef;
    reason: NgModuleReason | string;
};
export declare const preAngularDisposal$: Subject<NgModuleEvent>;
export declare const postAngularBootstrap$: Subject<NgModuleEvent>;
/**
 * @deprecated
 */
export declare const onBeforeLivesync: Observable<NgModuleRef<any>>;
/**
 * @deprecated
 */
export declare const onAfterLivesync: Observable<{
    moduleRef?: NgModuleRef<any>;
    error?: Error;
}>;
export interface AppRunOptions<T, K> {
    /**
     * Runs when the app is launched or during HMR.
     * May not run immediately if the app was started in background (e.g. push notification)
     * @param reason reason for bootstrap. @see {NgModuleReason}
     * @returns Promise to the bootstrapped NgModuleRef
     */
    appModuleBootstrap: (reason: NgModuleReason) => Promise<NgModuleRef<T> | ApplicationRef>;
    /**
     * Loads a custom NgModule for the loading screen.
     * This loads only if appModuleBootstrap doesn't resolve synchronously (e.g. async APP_INITIALIZER).
     * @param reason reason for bootstrap. @see {NgModuleReason}
     * @returns Promise to the bootstrapped NgModuleRef. Must resolve immediately (no async initialization)
     */
    loadingModule?: (reason: NgModuleReason) => Promise<NgModuleRef<K> | ApplicationRef>;
    /**
     * Simpler than loadingModule, this will show a view while the app is bootstrapping asynchronously.
     * @param reason reason for bootstrap. @see {NgModuleReason}
     * @returns View that will be shown while app boots
     */
    launchView?: (reason: NgModuleReason) => AppLaunchView;
    /**
     * Wether we are running in an embedded context (e.g. embedding NativeScript in an existing app)
     */
    embedded?: boolean;
}
export interface ApplicationConfig {
    /**
     * List of providers that should be available to the root component and all its children.
     */
    providers: Array<Provider | EnvironmentProviders>;
}
export declare function bootstrapApplication(rootComponent: Type<unknown>, options?: ApplicationConfig): Promise<ApplicationRef>;
export declare function runNativeScriptAngularApp<T, K>(options: AppRunOptions<T, K>): void;
